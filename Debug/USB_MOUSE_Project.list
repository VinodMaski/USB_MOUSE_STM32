
USB_MOUSE_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008324  08008324  0002016c  2**0
                  CONTENTS
  4 .ARM          00000000  08008324  08008324  0002016c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008324  08008324  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  2000016c  08008498  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  08008498  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012691  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b8  00000000  00000000  00032826  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00035ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000196de  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d494  00000000  00000000  0005015e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087299  00000000  00000000  0005d5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e488b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000e4908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000016c 	.word	0x2000016c
 8000128:	00000000 	.word	0x00000000
 800012c:	080082a0 	.word	0x080082a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000170 	.word	0x20000170
 8000148:	080082a0 	.word	0x080082a0

0800014c <Adxl_Write>:
uint8_t Rx_Data[6];

int16_t x,y,z;

void Adxl_Write (uint8_t reg, uint8_t value)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000160:	79bb      	ldrb	r3, [r7, #6]
 8000162:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, ADXL_ADDRESS, data, 2, 100);
 8000164:	f107 020c 	add.w	r2, r7, #12
 8000168:	2364      	movs	r3, #100	; 0x64
 800016a:	9300      	str	r3, [sp, #0]
 800016c:	2302      	movs	r3, #2
 800016e:	21a6      	movs	r1, #166	; 0xa6
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <Adxl_Write+0x34>)
 8000172:	f000 ffed 	bl	8001150 <HAL_I2C_Master_Transmit>
}
 8000176:	bf00      	nop
 8000178:	3710      	adds	r7, #16
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200001b0 	.word	0x200001b0

08000184 <Adxl_Read>:

void Adxl_Read (uint8_t reg)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af04      	add	r7, sp, #16
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, ADXL_ADDRESS, reg, 1, (uint8_t *)Rx_Data, 6, 100);
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	b29a      	uxth	r2, r3
 8000192:	2364      	movs	r3, #100	; 0x64
 8000194:	9302      	str	r3, [sp, #8]
 8000196:	2306      	movs	r3, #6
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <Adxl_Read+0x2c>)
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	21a6      	movs	r1, #166	; 0xa6
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <Adxl_Read+0x30>)
 80001a4:	f001 f8d2 	bl	800134c <HAL_I2C_Mem_Read>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000208 	.word	0x20000208
 80001b4:	200001b0 	.word	0x200001b0

080001b8 <Adxl_Init>:

void Adxl_Init (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	Adxl_Write (0x31, 0x01);  // data_format range= +- 4g
 80001bc:	2101      	movs	r1, #1
 80001be:	2031      	movs	r0, #49	; 0x31
 80001c0:	f7ff ffc4 	bl	800014c <Adxl_Write>
	Adxl_Write (0x2d, 0x00);  // reset all bits
 80001c4:	2100      	movs	r1, #0
 80001c6:	202d      	movs	r0, #45	; 0x2d
 80001c8:	f7ff ffc0 	bl	800014c <Adxl_Write>
	Adxl_Write (0x2d, 0x08);  // power_cntl measure and wake up 8hz
 80001cc:	2108      	movs	r1, #8
 80001ce:	202d      	movs	r0, #45	; 0x2d
 80001d0:	f7ff ffbc 	bl	800014c <Adxl_Write>

}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <Adxl_Calibrate>:



void Adxl_Calibrate (void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	for (int i=0; i<50; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e059      	b.n	8000298 <Adxl_Calibrate+0xc0>
	{
		Adxl_Read (0x32);
 80001e4:	2032      	movs	r0, #50	; 0x32
 80001e6:	f7ff ffcd 	bl	8000184 <Adxl_Read>
		x = ((Rx_Data[1]<<8)|Rx_Data[0]);
 80001ea:	4b32      	ldr	r3, [pc, #200]	; (80002b4 <Adxl_Calibrate+0xdc>)
 80001ec:	785b      	ldrb	r3, [r3, #1]
 80001ee:	021b      	lsls	r3, r3, #8
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <Adxl_Calibrate+0xdc>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b21b      	sxth	r3, r3
 80001f8:	4313      	orrs	r3, r2
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	4b2e      	ldr	r3, [pc, #184]	; (80002b8 <Adxl_Calibrate+0xe0>)
 80001fe:	801a      	strh	r2, [r3, #0]
		y = ((Rx_Data[3]<<8)|Rx_Data[2]);
 8000200:	4b2c      	ldr	r3, [pc, #176]	; (80002b4 <Adxl_Calibrate+0xdc>)
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	021b      	lsls	r3, r3, #8
 8000206:	b21a      	sxth	r2, r3
 8000208:	4b2a      	ldr	r3, [pc, #168]	; (80002b4 <Adxl_Calibrate+0xdc>)
 800020a:	789b      	ldrb	r3, [r3, #2]
 800020c:	b21b      	sxth	r3, r3
 800020e:	4313      	orrs	r3, r2
 8000210:	b21a      	sxth	r2, r3
 8000212:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <Adxl_Calibrate+0xe4>)
 8000214:	801a      	strh	r2, [r3, #0]
		z = ((Rx_Data[5]<<8)|Rx_Data[4]);
 8000216:	4b27      	ldr	r3, [pc, #156]	; (80002b4 <Adxl_Calibrate+0xdc>)
 8000218:	795b      	ldrb	r3, [r3, #5]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21a      	sxth	r2, r3
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <Adxl_Calibrate+0xdc>)
 8000220:	791b      	ldrb	r3, [r3, #4]
 8000222:	b21b      	sxth	r3, r3
 8000224:	4313      	orrs	r3, r2
 8000226:	b21a      	sxth	r2, r3
 8000228:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <Adxl_Calibrate+0xe8>)
 800022a:	801a      	strh	r2, [r3, #0]
		min_xval = MIN(min_xval, x);
 800022c:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <Adxl_Calibrate+0xe0>)
 800022e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000232:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <Adxl_Calibrate+0xec>)
 8000234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000238:	4293      	cmp	r3, r2
 800023a:	bfa8      	it	ge
 800023c:	4613      	movge	r3, r2
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <Adxl_Calibrate+0xec>)
 8000242:	801a      	strh	r2, [r3, #0]
		max_xval = MAX(max_xval, x);
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <Adxl_Calibrate+0xe0>)
 8000246:	f9b3 2000 	ldrsh.w	r2, [r3]
 800024a:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <Adxl_Calibrate+0xf0>)
 800024c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000250:	4293      	cmp	r3, r2
 8000252:	bfb8      	it	lt
 8000254:	4613      	movlt	r3, r2
 8000256:	b21a      	sxth	r2, r3
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <Adxl_Calibrate+0xf0>)
 800025a:	801a      	strh	r2, [r3, #0]
		min_yval = MIN(min_yval, y);
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <Adxl_Calibrate+0xe4>)
 800025e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <Adxl_Calibrate+0xf4>)
 8000264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000268:	4293      	cmp	r3, r2
 800026a:	bfa8      	it	ge
 800026c:	4613      	movge	r3, r2
 800026e:	b21a      	sxth	r2, r3
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <Adxl_Calibrate+0xf4>)
 8000272:	801a      	strh	r2, [r3, #0]
		max_yval = MAX(max_yval, y);
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <Adxl_Calibrate+0xe4>)
 8000276:	f9b3 2000 	ldrsh.w	r2, [r3]
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <Adxl_Calibrate+0xf8>)
 800027c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000280:	4293      	cmp	r3, r2
 8000282:	bfb8      	it	lt
 8000284:	4613      	movlt	r3, r2
 8000286:	b21a      	sxth	r2, r3
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <Adxl_Calibrate+0xf8>)
 800028a:	801a      	strh	r2, [r3, #0]
		HAL_Delay (100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f000 fb6d 	bl	800096c <HAL_Delay>
	for (int i=0; i<50; i++)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b31      	cmp	r3, #49	; 0x31
 800029c:	dda2      	ble.n	80001e4 <Adxl_Calibrate+0xc>
	}

	/* Turn On the LED to show the completion of calibration */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <Adxl_Calibrate+0xfc>)
 80002a6:	f000 fdeb 	bl	8000e80 <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000208 	.word	0x20000208
 80002b8:	200001ac 	.word	0x200001ac
 80002bc:	20000206 	.word	0x20000206
 80002c0:	20000204 	.word	0x20000204
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000002 	.word	0x20000002
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000006 	.word	0x20000006
 80002d4:	40011000 	.word	0x40011000

080002d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7)
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	2b80      	cmp	r3, #128	; 0x80
 80002e6:	d102      	bne.n	80002ee <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <HAL_GPIO_EXTI_Callback+0x20>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
	}
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	2000018c 	.word	0x2000018c

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000300:	f000 fad2 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f8fa 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f000 f980 	bl	800060c <MX_GPIO_Init>
  MX_I2C1_Init();
 800030c:	f000 f950 	bl	80005b0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000310:	f007 fbe0 	bl	8007ad4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Adxl_Init();
 8000314:	f7ff ff50 	bl	80001b8 <Adxl_Init>
  Adxl_Calibrate();
 8000318:	f7ff ff5e 	bl	80001d8 <Adxl_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Adxl_Read (0x32);
 800031c:	2032      	movs	r0, #50	; 0x32
 800031e:	f7ff ff31 	bl	8000184 <Adxl_Read>
	  x = ((Rx_Data[1]<<8)|Rx_Data[0]);
 8000322:	4b68      	ldr	r3, [pc, #416]	; (80004c4 <main+0x1c8>)
 8000324:	785b      	ldrb	r3, [r3, #1]
 8000326:	021b      	lsls	r3, r3, #8
 8000328:	b21a      	sxth	r2, r3
 800032a:	4b66      	ldr	r3, [pc, #408]	; (80004c4 <main+0x1c8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b21b      	sxth	r3, r3
 8000330:	4313      	orrs	r3, r2
 8000332:	b21a      	sxth	r2, r3
 8000334:	4b64      	ldr	r3, [pc, #400]	; (80004c8 <main+0x1cc>)
 8000336:	801a      	strh	r2, [r3, #0]
	  y = ((Rx_Data[3]<<8)|Rx_Data[2]);
 8000338:	4b62      	ldr	r3, [pc, #392]	; (80004c4 <main+0x1c8>)
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	021b      	lsls	r3, r3, #8
 800033e:	b21a      	sxth	r2, r3
 8000340:	4b60      	ldr	r3, [pc, #384]	; (80004c4 <main+0x1c8>)
 8000342:	789b      	ldrb	r3, [r3, #2]
 8000344:	b21b      	sxth	r3, r3
 8000346:	4313      	orrs	r3, r2
 8000348:	b21a      	sxth	r2, r3
 800034a:	4b60      	ldr	r3, [pc, #384]	; (80004cc <main+0x1d0>)
 800034c:	801a      	strh	r2, [r3, #0]
	  z = ((Rx_Data[5]<<8)|Rx_Data[4]);
 800034e:	4b5d      	ldr	r3, [pc, #372]	; (80004c4 <main+0x1c8>)
 8000350:	795b      	ldrb	r3, [r3, #5]
 8000352:	021b      	lsls	r3, r3, #8
 8000354:	b21a      	sxth	r2, r3
 8000356:	4b5b      	ldr	r3, [pc, #364]	; (80004c4 <main+0x1c8>)
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	b21b      	sxth	r3, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	b21a      	sxth	r2, r3
 8000360:	4b5b      	ldr	r3, [pc, #364]	; (80004d0 <main+0x1d4>)
 8000362:	801a      	strh	r2, [r3, #0]

	  if (x < min_xval)
 8000364:	4b58      	ldr	r3, [pc, #352]	; (80004c8 <main+0x1cc>)
 8000366:	f9b3 2000 	ldrsh.w	r2, [r3]
 800036a:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <main+0x1d8>)
 800036c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000370:	429a      	cmp	r2, r3
 8000372:	da0d      	bge.n	8000390 <main+0x94>
	   {
	     newxval = x - min_xval;
 8000374:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <main+0x1cc>)
 8000376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b55      	ldr	r3, [pc, #340]	; (80004d4 <main+0x1d8>)
 800037e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000382:	b29b      	uxth	r3, r3
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	b29b      	uxth	r3, r3
 8000388:	b21a      	sxth	r2, r3
 800038a:	4b53      	ldr	r3, [pc, #332]	; (80004d8 <main+0x1dc>)
 800038c:	801a      	strh	r2, [r3, #0]
 800038e:	e014      	b.n	80003ba <main+0xbe>
	   }

	  else if (x > max_xval)
 8000390:	4b4d      	ldr	r3, [pc, #308]	; (80004c8 <main+0x1cc>)
 8000392:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000396:	4b51      	ldr	r3, [pc, #324]	; (80004dc <main+0x1e0>)
 8000398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800039c:	429a      	cmp	r2, r3
 800039e:	dd0c      	ble.n	80003ba <main+0xbe>
	   {
	     newxval = x - max_xval;
 80003a0:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <main+0x1cc>)
 80003a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b4c      	ldr	r3, [pc, #304]	; (80004dc <main+0x1e0>)
 80003aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	b21a      	sxth	r2, r3
 80003b6:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <main+0x1dc>)
 80003b8:	801a      	strh	r2, [r3, #0]
	   }

	  if (y < min_yval)
 80003ba:	4b44      	ldr	r3, [pc, #272]	; (80004cc <main+0x1d0>)
 80003bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003c0:	4b47      	ldr	r3, [pc, #284]	; (80004e0 <main+0x1e4>)
 80003c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	da0d      	bge.n	80003e6 <main+0xea>
	  {
	    newyval = y - min_yval;
 80003ca:	4b40      	ldr	r3, [pc, #256]	; (80004cc <main+0x1d0>)
 80003cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <main+0x1e4>)
 80003d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003d8:	b29b      	uxth	r3, r3
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	b21a      	sxth	r2, r3
 80003e0:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <main+0x1e8>)
 80003e2:	801a      	strh	r2, [r3, #0]
 80003e4:	e014      	b.n	8000410 <main+0x114>
	  }

	  else if (y > max_yval)
 80003e6:	4b39      	ldr	r3, [pc, #228]	; (80004cc <main+0x1d0>)
 80003e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80003ec:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <main+0x1ec>)
 80003ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dd0c      	ble.n	8000410 <main+0x114>
	  {
	   newyval = y - max_yval;
 80003f6:	4b35      	ldr	r3, [pc, #212]	; (80004cc <main+0x1d0>)
 80003f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <main+0x1ec>)
 8000400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000404:	b29b      	uxth	r3, r3
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b29b      	uxth	r3, r3
 800040a:	b21a      	sxth	r2, r3
 800040c:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <main+0x1e8>)
 800040e:	801a      	strh	r2, [r3, #0]
	  }
	  if ((newxval > 20) || (newxval <-20))
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <main+0x1dc>)
 8000412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000416:	2b14      	cmp	r3, #20
 8000418:	dc05      	bgt.n	8000426 <main+0x12a>
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <main+0x1dc>)
 800041c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000420:	f113 0f14 	cmn.w	r3, #20
 8000424:	da0c      	bge.n	8000440 <main+0x144>
	  {
	   mousehid.mouse_y = (newxval/3);
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <main+0x1dc>)
 8000428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800042c:	4a2f      	ldr	r2, [pc, #188]	; (80004ec <main+0x1f0>)
 800042e:	fb82 1203 	smull	r1, r2, r2, r3
 8000432:	17db      	asrs	r3, r3, #31
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	b21b      	sxth	r3, r3
 8000438:	b25a      	sxtb	r2, r3
 800043a:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <main+0x1f4>)
 800043c:	709a      	strb	r2, [r3, #2]
 800043e:	e002      	b.n	8000446 <main+0x14a>
	  }

	  else mousehid.mouse_y = 0;
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <main+0x1f4>)
 8000442:	2200      	movs	r2, #0
 8000444:	709a      	strb	r2, [r3, #2]
	  if ((newyval > 20) || (newyval <-20))
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <main+0x1e8>)
 8000448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800044c:	2b14      	cmp	r3, #20
 800044e:	dc05      	bgt.n	800045c <main+0x160>
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <main+0x1e8>)
 8000452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000456:	f113 0f14 	cmn.w	r3, #20
 800045a:	da0c      	bge.n	8000476 <main+0x17a>
	  {
	   mousehid.mouse_x= (newyval)/3;
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <main+0x1e8>)
 800045e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000462:	4a22      	ldr	r2, [pc, #136]	; (80004ec <main+0x1f0>)
 8000464:	fb82 1203 	smull	r1, r2, r2, r3
 8000468:	17db      	asrs	r3, r3, #31
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	b21b      	sxth	r3, r3
 800046e:	b25a      	sxtb	r2, r3
 8000470:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <main+0x1f4>)
 8000472:	705a      	strb	r2, [r3, #1]
 8000474:	e002      	b.n	800047c <main+0x180>
	  }

	  else mousehid.mouse_x = 0;
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <main+0x1f4>)
 8000478:	2200      	movs	r2, #0
 800047a:	705a      	strb	r2, [r3, #1]
	  if (button_flag==1)
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <main+0x1f8>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d115      	bne.n	80004b0 <main+0x1b4>
	  {
	   mousehid.button = 1;
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <main+0x1f4>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	   USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 800048a:	2204      	movs	r2, #4
 800048c:	4918      	ldr	r1, [pc, #96]	; (80004f0 <main+0x1f4>)
 800048e:	481a      	ldr	r0, [pc, #104]	; (80004f8 <main+0x1fc>)
 8000490:	f006 fa3e 	bl	8006910 <USBD_HID_SendReport>
	   HAL_Delay (50);
 8000494:	2032      	movs	r0, #50	; 0x32
 8000496:	f000 fa69 	bl	800096c <HAL_Delay>
	   mousehid.button = 0;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <main+0x1f4>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]

	   USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid));
 80004a0:	2204      	movs	r2, #4
 80004a2:	4913      	ldr	r1, [pc, #76]	; (80004f0 <main+0x1f4>)
 80004a4:	4814      	ldr	r0, [pc, #80]	; (80004f8 <main+0x1fc>)
 80004a6:	f006 fa33 	bl	8006910 <USBD_HID_SendReport>
	   button_flag =0;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <main+0x1f8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	  }
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 80004b0:	2204      	movs	r2, #4
 80004b2:	490f      	ldr	r1, [pc, #60]	; (80004f0 <main+0x1f4>)
 80004b4:	4810      	ldr	r0, [pc, #64]	; (80004f8 <main+0x1fc>)
 80004b6:	f006 fa2b 	bl	8006910 <USBD_HID_SendReport>
	  HAL_Delay(10);
 80004ba:	200a      	movs	r0, #10
 80004bc:	f000 fa56 	bl	800096c <HAL_Delay>
	  Adxl_Read (0x32);
 80004c0:	e72c      	b.n	800031c <main+0x20>
 80004c2:	bf00      	nop
 80004c4:	20000208 	.word	0x20000208
 80004c8:	200001ac 	.word	0x200001ac
 80004cc:	20000206 	.word	0x20000206
 80004d0:	20000204 	.word	0x20000204
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000188 	.word	0x20000188
 80004dc:	20000002 	.word	0x20000002
 80004e0:	20000004 	.word	0x20000004
 80004e4:	2000018a 	.word	0x2000018a
 80004e8:	20000006 	.word	0x20000006
 80004ec:	55555556 	.word	0x55555556
 80004f0:	20000190 	.word	0x20000190
 80004f4:	2000018c 	.word	0x2000018c
 80004f8:	20000214 	.word	0x20000214

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f007 fec0 	bl	8008290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052c:	2301      	movs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000548:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f94e 	bl	80037f4 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800055e:	f000 f8c5 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000572:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fbb8 	bl	8003cf4 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058a:	f000 f8af 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800058e:	2310      	movs	r3, #16
 8000590:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fd33 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005a4:	f000 f8a2 	bl	80006ec <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3750      	adds	r7, #80	; 0x50
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <MX_I2C1_Init+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x50>)
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_I2C1_Init+0x58>)
 80005be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_I2C1_Init+0x50>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_I2C1_Init+0x50>)
 80005ee:	f000 fc77 	bl	8000ee0 <HAL_I2C_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f878 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001b0 	.word	0x200001b0
 8000604:	40005400 	.word	0x40005400
 8000608:	000186a0 	.word	0x000186a0

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000620:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xd0>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_GPIO_Init+0xd0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <MX_GPIO_Init+0xd0>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_GPIO_Init+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_GPIO_Init+0xd0>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4816      	ldr	r0, [pc, #88]	; (80006e0 <MX_GPIO_Init+0xd4>)
 8000688:	f000 fbfa 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800068c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006a6:	f000 fa91 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_GPIO_Init+0xd8>)
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <MX_GPIO_Init+0xdc>)
 80006be:	f000 fa85 	bl	8000bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2017      	movs	r0, #23
 80006c8:	f000 fa49 	bl	8000b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006cc:	2017      	movs	r0, #23
 80006ce:	f000 fa62 	bl	8000b96 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40011000 	.word	0x40011000
 80006e4:	10210000 	.word	0x10210000
 80006e8:	40010800 	.word	0x40010800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <HAL_I2C_MspInit+0x70>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d123      	bne.n	80007c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000798:	2312      	movs	r3, #18
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <HAL_I2C_MspInit+0x78>)
 80007a8:	f000 fa10 	bl	8000bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 80007b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b6:	61d3      	str	r3, [r2, #28]
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_I2C_MspInit+0x74>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <HardFault_Handler+0x4>

080007ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <BusFault_Handler+0x4>

080007f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f886 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000832:	f001 fc64 	bl	80020fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200006d8 	.word	0x200006d8

08000840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000844:	2080      	movs	r0, #128	; 0x80
 8000846:	f000 fb33 	bl	8000eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}

0800084e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffe4 	bl	800084e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f007 fcdf 	bl	8008248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fd37 	bl	80002fc <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000898:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 800089c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80008a0:	200009c4 	.word	0x200009c4

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f945 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff18 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f95d 	bl	8000bb2 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f925 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008
 800092c:	20000010 	.word	0x20000010
 8000930:	2000000c 	.word	0x2000000c

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000010 	.word	0x20000010
 8000954:	20000210 	.word	0x20000210

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000210 	.word	0x20000210

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_Delay+0x40>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000010 	.word	0x20000010

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4906      	ldr	r1, [pc, #24]	; (8000a48 <__NVIC_EnableIRQ+0x34>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff90 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff2d 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff42 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff90 	bl	8000aa0 <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5f 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff35 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e127      	b.n	8000e30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be0:	2201      	movs	r2, #1
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8116 	bne.w	8000e2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d034      	beq.n	8000c70 <HAL_GPIO_Init+0xa4>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d80d      	bhi.n	8000c26 <HAL_GPIO_Init+0x5a>
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d02b      	beq.n	8000c66 <HAL_GPIO_Init+0x9a>
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d804      	bhi.n	8000c1c <HAL_GPIO_Init+0x50>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d031      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d01c      	beq.n	8000c54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1a:	e048      	b.n	8000cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d043      	beq.n	8000ca8 <HAL_GPIO_Init+0xdc>
 8000c20:	2b11      	cmp	r3, #17
 8000c22:	d01b      	beq.n	8000c5c <HAL_GPIO_Init+0x90>
          break;
 8000c24:	e043      	b.n	8000cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c26:	4a89      	ldr	r2, [pc, #548]	; (8000e4c <HAL_GPIO_Init+0x280>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d026      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
 8000c2c:	4a87      	ldr	r2, [pc, #540]	; (8000e4c <HAL_GPIO_Init+0x280>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d806      	bhi.n	8000c40 <HAL_GPIO_Init+0x74>
 8000c32:	4a87      	ldr	r2, [pc, #540]	; (8000e50 <HAL_GPIO_Init+0x284>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d020      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
 8000c38:	4a86      	ldr	r2, [pc, #536]	; (8000e54 <HAL_GPIO_Init+0x288>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d01d      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
          break;
 8000c3e:	e036      	b.n	8000cae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c40:	4a85      	ldr	r2, [pc, #532]	; (8000e58 <HAL_GPIO_Init+0x28c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d019      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
 8000c46:	4a85      	ldr	r2, [pc, #532]	; (8000e5c <HAL_GPIO_Init+0x290>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d016      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
 8000c4c:	4a84      	ldr	r2, [pc, #528]	; (8000e60 <HAL_GPIO_Init+0x294>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d013      	beq.n	8000c7a <HAL_GPIO_Init+0xae>
          break;
 8000c52:	e02c      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e028      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	3304      	adds	r3, #4
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e023      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e01e      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	330c      	adds	r3, #12
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e019      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c82:	2304      	movs	r3, #4
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e012      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d105      	bne.n	8000c9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	611a      	str	r2, [r3, #16]
          break;
 8000c9a:	e008      	b.n	8000cae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	615a      	str	r2, [r3, #20]
          break;
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d801      	bhi.n	8000cb8 <HAL_GPIO_Init+0xec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	e001      	b.n	8000cbc <HAL_GPIO_Init+0xf0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	2bff      	cmp	r3, #255	; 0xff
 8000cc2:	d802      	bhi.n	8000cca <HAL_GPIO_Init+0xfe>
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_Init+0x104>
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	6a39      	ldr	r1, [r7, #32]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	431a      	orrs	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 8096 	beq.w	8000e2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <HAL_GPIO_Init+0x298>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a58      	ldr	r2, [pc, #352]	; (8000e64 <HAL_GPIO_Init+0x298>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_GPIO_Init+0x298>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d16:	4a54      	ldr	r2, [pc, #336]	; (8000e68 <HAL_GPIO_Init+0x29c>)
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_GPIO_Init+0x2a0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x19e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4a      	ldr	r2, [pc, #296]	; (8000e70 <HAL_GPIO_Init+0x2a4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x19a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a49      	ldr	r2, [pc, #292]	; (8000e74 <HAL_GPIO_Init+0x2a8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x196>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a48      	ldr	r2, [pc, #288]	; (8000e78 <HAL_GPIO_Init+0x2ac>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x192>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x1a0>
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x1a0>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x1a0>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x1a0>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d7c:	493a      	ldr	r1, [pc, #232]	; (8000e68 <HAL_GPIO_Init+0x29c>)
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d96:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4938      	ldr	r1, [pc, #224]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	4933      	ldr	r1, [pc, #204]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	492e      	ldr	r1, [pc, #184]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	604b      	str	r3, [r1, #4]
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4929      	ldr	r1, [pc, #164]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	4924      	ldr	r1, [pc, #144]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	491f      	ldr	r1, [pc, #124]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	491a      	ldr	r1, [pc, #104]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	60cb      	str	r3, [r1, #12]
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4915      	ldr	r1, [pc, #84]	; (8000e7c <HAL_GPIO_Init+0x2b0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f47f aed0 	bne.w	8000be0 <HAL_GPIO_Init+0x14>
  }
}
 8000e40:	bf00      	nop
 8000e42:	372c      	adds	r7, #44	; 0x2c
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	10210000 	.word	0x10210000
 8000e50:	10110000 	.word	0x10110000
 8000e54:	10120000 	.word	0x10120000
 8000e58:	10310000 	.word	0x10310000
 8000e5c:	10320000 	.word	0x10320000
 8000e60:	10220000 	.word	0x10220000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	40010400 	.word	0x40010400

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e9c:	e003      	b.n	8000ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	611a      	str	r2, [r3, #16]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fa02 	bl	80002d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e11f      	b.n	8001132 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d106      	bne.n	8000f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fc28 	bl	800075c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2224      	movs	r2, #36	; 0x24
 8000f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f44:	f003 f82c 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8000f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a7b      	ldr	r2, [pc, #492]	; (800113c <HAL_I2C_Init+0x25c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d807      	bhi.n	8000f64 <HAL_I2C_Init+0x84>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a7a      	ldr	r2, [pc, #488]	; (8001140 <HAL_I2C_Init+0x260>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	bf94      	ite	ls
 8000f5c:	2301      	movls	r3, #1
 8000f5e:	2300      	movhi	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	e006      	b.n	8000f72 <HAL_I2C_Init+0x92>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4a77      	ldr	r2, [pc, #476]	; (8001144 <HAL_I2C_Init+0x264>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	bf94      	ite	ls
 8000f6c:	2301      	movls	r3, #1
 8000f6e:	2300      	movhi	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0db      	b.n	8001132 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4a72      	ldr	r2, [pc, #456]	; (8001148 <HAL_I2C_Init+0x268>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a64      	ldr	r2, [pc, #400]	; (800113c <HAL_I2C_Init+0x25c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d802      	bhi.n	8000fb4 <HAL_I2C_Init+0xd4>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	e009      	b.n	8000fc8 <HAL_I2C_Init+0xe8>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	4a63      	ldr	r2, [pc, #396]	; (800114c <HAL_I2C_Init+0x26c>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4956      	ldr	r1, [pc, #344]	; (800113c <HAL_I2C_Init+0x25c>)
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	d80d      	bhi.n	8001004 <HAL_I2C_Init+0x124>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1e59      	subs	r1, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	bf38      	it	cc
 8001000:	2304      	movcc	r3, #4
 8001002:	e04f      	b.n	80010a4 <HAL_I2C_Init+0x1c4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <HAL_I2C_Init+0x150>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	fbb0 f3f3 	udiv	r3, r0, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	e012      	b.n	8001056 <HAL_I2C_Init+0x176>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1e58      	subs	r0, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	0099      	lsls	r1, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	fbb0 f3f3 	udiv	r3, r0, r3
 8001046:	3301      	adds	r3, #1
 8001048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_Init+0x17e>
 800105a:	2301      	movs	r3, #1
 800105c:	e022      	b.n	80010a4 <HAL_I2C_Init+0x1c4>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10e      	bne.n	8001084 <HAL_I2C_Init+0x1a4>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1e58      	subs	r0, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6859      	ldr	r1, [r3, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	440b      	add	r3, r1
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	3301      	adds	r3, #1
 800107a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	e00f      	b.n	80010a4 <HAL_I2C_Init+0x1c4>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1e58      	subs	r0, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	0099      	lsls	r1, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	6809      	ldr	r1, [r1, #0]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69da      	ldr	r2, [r3, #28]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6911      	ldr	r1, [r2, #16]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68d2      	ldr	r2, [r2, #12]
 80010de:	4311      	orrs	r1, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	000186a0 	.word	0x000186a0
 8001140:	001e847f 	.word	0x001e847f
 8001144:	003d08ff 	.word	0x003d08ff
 8001148:	431bde83 	.word	0x431bde83
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	460b      	mov	r3, r1
 800115e:	817b      	strh	r3, [r7, #10]
 8001160:	4613      	mov	r3, r2
 8001162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fbf8 	bl	8000958 <HAL_GetTick>
 8001168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b20      	cmp	r3, #32
 8001174:	f040 80e0 	bne.w	8001338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2319      	movs	r3, #25
 800117e:	2201      	movs	r2, #1
 8001180:	4970      	ldr	r1, [pc, #448]	; (8001344 <HAL_I2C_Master_Transmit+0x1f4>)
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f000 fcae 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800118e:	2302      	movs	r3, #2
 8001190:	e0d3      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_I2C_Master_Transmit+0x50>
 800119c:	2302      	movs	r3, #2
 800119e:	e0cc      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d007      	beq.n	80011c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0201 	orr.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2221      	movs	r2, #33	; 0x21
 80011da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2210      	movs	r2, #16
 80011e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	893a      	ldrh	r2, [r7, #8]
 80011f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_I2C_Master_Transmit+0x1f8>)
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001208:	8979      	ldrh	r1, [r7, #10]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	6a3a      	ldr	r2, [r7, #32]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 fafe 	bl	8001810 <I2C_MasterRequestWrite>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e08d      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001234:	e066      	b.n	8001304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	6a39      	ldr	r1, [r7, #32]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 fd28 	bl	8001c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00d      	beq.n	8001262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b04      	cmp	r3, #4
 800124c:	d107      	bne.n	800125e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06b      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	3b01      	subs	r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b04      	cmp	r3, #4
 800129e:	d11b      	bne.n	80012d8 <HAL_I2C_Master_Transmit+0x188>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d017      	beq.n	80012d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	6a39      	ldr	r1, [r7, #32]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fd18 	bl	8001d12 <I2C_WaitOnBTFFlagUntilTimeout>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00d      	beq.n	8001304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d107      	bne.n	8001300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e01a      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	2b00      	cmp	r3, #0
 800130a:	d194      	bne.n	8001236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800131a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2220      	movs	r2, #32
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	e000      	b.n	800133a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001338:	2302      	movs	r3, #2
  }
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	00100002 	.word	0x00100002
 8001348:	ffff0000 	.word	0xffff0000

0800134c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	4608      	mov	r0, r1
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	4603      	mov	r3, r0
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	460b      	mov	r3, r1
 8001360:	813b      	strh	r3, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800136a:	f7ff faf5 	bl	8000958 <HAL_GetTick>
 800136e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b20      	cmp	r3, #32
 800137a:	f040 823d 	bne.w	80017f8 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2319      	movs	r3, #25
 8001384:	2201      	movs	r2, #1
 8001386:	4981      	ldr	r1, [pc, #516]	; (800158c <HAL_I2C_Mem_Read+0x240>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 fbab 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001394:	2302      	movs	r3, #2
 8001396:	e230      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Mem_Read+0x5a>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e229      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d007      	beq.n	80013cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2222      	movs	r2, #34	; 0x22
 80013e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a61      	ldr	r2, [pc, #388]	; (8001590 <HAL_I2C_Mem_Read+0x244>)
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800140e:	88f8      	ldrh	r0, [r7, #6]
 8001410:	893a      	ldrh	r2, [r7, #8]
 8001412:	8979      	ldrh	r1, [r7, #10]
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	4603      	mov	r3, r0
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fa78 	bl	8001914 <I2C_RequestMemoryRead>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e1e5      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e1b9      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001462:	2b01      	cmp	r3, #1
 8001464:	d11d      	bne.n	80014a2 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001474:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001476:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800149c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800149e:	b662      	cpsie	i
 80014a0:	e197      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d11d      	bne.n	80014e6 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014ba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e2:	b662      	cpsie	i
 80014e4:	e175      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800150c:	e161      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	2b03      	cmp	r3, #3
 8001514:	f200 811a 	bhi.w	800174c <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	2b01      	cmp	r3, #1
 800151e:	d123      	bne.n	8001568 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fc35 	bl	8001d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e162      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001566:	e134      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	2b02      	cmp	r3, #2
 800156e:	d150      	bne.n	8001612 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	2200      	movs	r2, #0
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <HAL_I2C_Mem_Read+0x248>)
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fab2 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e137      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
 800158a:	bf00      	nop
 800158c:	00100002 	.word	0x00100002
 8001590:	ffff0000 	.word	0xffff0000
 8001594:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015dc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001610:	e0df      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	2200      	movs	r2, #0
 800161a:	497a      	ldr	r1, [pc, #488]	; (8001804 <HAL_I2C_Mem_Read+0x4b8>)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fa61 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0e6      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001670:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_I2C_Mem_Read+0x4bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	4a65      	ldr	r2, [pc, #404]	; (800180c <HAL_I2C_Mem_Read+0x4c0>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0a1a      	lsrs	r2, r3, #8
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00da      	lsls	r2, r3, #3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	3b01      	subs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d117      	bne.n	80016c6 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016b8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e099      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d1da      	bne.n	800168a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001716:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a
 800174a:	e042      	b.n	80017d2 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fb1f 	bl	8001d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e04c      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b04      	cmp	r3, #4
 800179e:	d118      	bne.n	80017d2 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae99 	bne.w	800150e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00010004 	.word	0x00010004
 8001808:	20000008 	.word	0x20000008
 800180c:	14f8b589 	.word	0x14f8b589

08001810 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d006      	beq.n	800183a <I2C_MasterRequestWrite+0x2a>
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <I2C_MasterRequestWrite+0x2a>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001838:	d108      	bne.n	800184c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e00b      	b.n	8001864 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	2b12      	cmp	r3, #18
 8001852:	d107      	bne.n	8001864 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001862:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f937 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00d      	beq.n	8001898 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188a:	d103      	bne.n	8001894 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e035      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018a0:	d108      	bne.n	80018b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	e01b      	b.n	80018ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018b4:	897b      	ldrh	r3, [r7, #10]
 80018b6:	11db      	asrs	r3, r3, #7
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0306 	and.w	r3, r3, #6
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f063 030f 	orn	r3, r3, #15
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <I2C_MasterRequestWrite+0xfc>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f95d 	bl	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e010      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <I2C_MasterRequestWrite+0x100>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f94d 	bl	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	00010008 	.word	0x00010008
 8001910:	00010002 	.word	0x00010002

08001914 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	817b      	strh	r3, [r7, #10]
 8001926:	460b      	mov	r3, r1
 8001928:	813b      	strh	r3, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800193c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	2200      	movs	r2, #0
 8001956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f8c2 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001974:	d103      	bne.n	800197e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0aa      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	4952      	ldr	r1, [pc, #328]	; (8001ae0 <I2C_RequestMemoryRead+0x1cc>)
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f8fa 	bl	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e097      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f964 	bl	8001c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d107      	bne.n	80019e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e076      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	e021      	b.n	8001a40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019fc:	893b      	ldrh	r3, [r7, #8]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f93e 	bl	8001c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d107      	bne.n	8001a32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e050      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a36:	893b      	ldrh	r3, [r7, #8]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	6a39      	ldr	r1, [r7, #32]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f923 	bl	8001c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d107      	bne.n	8001a68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e035      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f82b 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00d      	beq.n	8001ab0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa2:	d103      	bne.n	8001aac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e013      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ab0:	897b      	ldrh	r3, [r7, #10]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <I2C_RequestMemoryRead+0x1cc>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f863 	bl	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	00010002 	.word	0x00010002

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e025      	b.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d021      	beq.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afe:	f7fe ff2b 	bl	8000958 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d302      	bcc.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d116      	bne.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f043 0220 	orr.w	r2, r3, #32
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e023      	b.n	8001b8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10d      	bne.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4013      	ands	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	e00c      	b.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d0b6      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba0:	e051      	b.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb0:	d123      	bne.n	8001bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0204 	orr.w	r2, r3, #4
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e046      	b.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d021      	beq.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7fe fea9 	bl	8000958 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d116      	bne.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e020      	b.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10c      	bne.n	8001c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	e00b      	b.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d18d      	bne.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c9c:	e02d      	b.n	8001cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f8ce 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e02d      	b.n	8001d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d021      	beq.n	8001cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7fe fe4f 	bl	8000958 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	d1ca      	bne.n	8001c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d1e:	e02d      	b.n	8001d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f88d 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e02d      	b.n	8001d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d36:	d021      	beq.n	8001d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d38:	f7fe fe0e 	bl	8000958 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d302      	bcc.n	8001d4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d116      	bne.n	8001d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f043 0220 	orr.w	r2, r3, #32
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e007      	b.n	8001d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d1ca      	bne.n	8001d20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001da0:	e042      	b.n	8001e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d119      	bne.n	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0210 	mvn.w	r2, #16
 8001db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e029      	b.n	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7fe fdb8 	bl	8000958 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0220 	orr.w	r2, r3, #32
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e007      	b.n	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d1b5      	bne.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d11b      	bne.n	8001e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af06      	add	r7, sp, #24
 8001ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0fd      	b.n	80020aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f005 ff3a 	bl	8007d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 f971 	bl	80041bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	687e      	ldr	r6, [r7, #4]
 8001ee2:	466d      	mov	r5, sp
 8001ee4:	f106 0410 	add.w	r4, r6, #16
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	602b      	str	r3, [r5, #0]
 8001ef0:	1d33      	adds	r3, r6, #4
 8001ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f002 f93b 	bl	8004170 <USB_CoreInit>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0ce      	b.n	80020aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 f96c 	bl	80041f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e04c      	b.n	8001fb8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3301      	adds	r3, #1
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3336      	adds	r3, #54	; 0x36
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3303      	adds	r3, #3
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	333c      	adds	r3, #60	; 0x3c
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	3340      	adds	r3, #64	; 0x40
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3ad      	bcc.n	8001f1e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e044      	b.n	8002052 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3b5      	bcc.n	8001fc8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	687e      	ldr	r6, [r7, #4]
 8002064:	466d      	mov	r5, sp
 8002066:	f106 0410 	add.w	r4, r6, #16
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	602b      	str	r3, [r5, #0]
 8002072:	1d33      	adds	r3, r6, #4
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f002 f8c6 	bl	8004208 <USB_DevInit>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00d      	b.n	80020aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fa37 	bl	8006516 <USB_DevDisconnect>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_Start+0x16>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e016      	b.n	80020f6 <HAL_PCD_Start+0x44>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 f85b 	bl	8004190 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020da:	2101      	movs	r1, #1
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 f87c 	bl	80081da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fa0b 	bl	8006502 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b088      	sub	sp, #32
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fa0d 	bl	800652a <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211a:	d102      	bne.n	8002122 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fb4a 	bl	80027b6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 f9ff 	bl	800652a <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d112      	bne.n	800215e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214a:	b292      	uxth	r2, r2
 800214c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f005 fe6e 	bl	8007e32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002156:	2100      	movs	r1, #0
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f925 	bl	80023a8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f9e1 	bl	800652a <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002172:	d10b      	bne.n	800218c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002186:	b292      	uxth	r2, r2
 8002188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f9ca 	bl	800652a <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a0:	d10b      	bne.n	80021ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b4:	b292      	uxth	r2, r2
 80021b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f9b3 	bl	800652a <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ce:	d126      	bne.n	800221e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	b292      	uxth	r2, r2
 80021e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	b292      	uxth	r2, r2
 80021fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f005 fe4f 	bl	8007ea4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002218:	b292      	uxth	r2, r2
 800221a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 f981 	bl	800652a <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002232:	f040 8084 	bne.w	800233e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	77fb      	strb	r3, [r7, #31]
 800223a:	e011      	b.n	8002260 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	441a      	add	r2, r3
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	8812      	ldrh	r2, [r2, #0]
 800224c:	b292      	uxth	r2, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	f107 0120 	add.w	r1, r7, #32
 8002254:	440b      	add	r3, r1
 8002256:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	3301      	adds	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	2b07      	cmp	r3, #7
 8002264:	d9ea      	bls.n	800223c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800226e:	b29a      	uxth	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	b292      	uxth	r2, r2
 800227a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	b292      	uxth	r2, r2
 8002292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002296:	bf00      	nop
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f6      	beq.n	8002298 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022bc:	b292      	uxth	r2, r2
 80022be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	77fb      	strb	r3, [r7, #31]
 80022c6:	e010      	b.n	80022ea <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4611      	mov	r1, r2
 80022d0:	7ffa      	ldrb	r2, [r7, #31]
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	440a      	add	r2, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	f107 0120 	add.w	r1, r7, #32
 80022dc:	440b      	add	r3, r1
 80022de:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80022e2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022e4:	7ffb      	ldrb	r3, [r7, #31]
 80022e6:	3301      	adds	r3, #1
 80022e8:	77fb      	strb	r3, [r7, #31]
 80022ea:	7ffb      	ldrb	r3, [r7, #31]
 80022ec:	2b07      	cmp	r3, #7
 80022ee:	d9eb      	bls.n	80022c8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0208 	orr.w	r2, r2, #8
 8002302:	b292      	uxth	r2, r2
 8002304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	b292      	uxth	r2, r2
 800231c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0204 	orr.w	r2, r2, #4
 8002332:	b292      	uxth	r2, r2
 8002334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f005 fd99 	bl	8007e70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f004 f8f1 	bl	800652a <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002352:	d10e      	bne.n	8002372 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002366:	b292      	uxth	r2, r2
 8002368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f005 fd52 	bl	8007e16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f004 f8d7 	bl	800652a <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002386:	d10b      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002390:	b29a      	uxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239a:	b292      	uxth	r2, r2
 800239c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_PCD_SetAddress+0x1a>
 80023be:	2302      	movs	r3, #2
 80023c0:	e013      	b.n	80023ea <HAL_PCD_SetAddress+0x42>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f87e 	bl	80064dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	4608      	mov	r0, r1
 80023fc:	4611      	mov	r1, r2
 80023fe:	461a      	mov	r2, r3
 8002400:	4603      	mov	r3, r0
 8002402:	70fb      	strb	r3, [r7, #3]
 8002404:	460b      	mov	r3, r1
 8002406:	803b      	strh	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002414:	2b00      	cmp	r3, #0
 8002416:	da0e      	bge.n	8002436 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	705a      	strb	r2, [r3, #1]
 8002434:	e00e      	b.n	8002454 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0207 	and.w	r2, r3, #7
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	b2da      	uxtb	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002460:	883a      	ldrh	r2, [r7, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	78ba      	ldrb	r2, [r7, #2]
 800246a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800247e:	78bb      	ldrb	r3, [r7, #2]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d102      	bne.n	800248a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_EP_Open+0xa6>
 8002494:	2302      	movs	r3, #2
 8002496:	e00e      	b.n	80024b6 <HAL_PCD_EP_Open+0xc4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fece 	bl	8004248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80024b4:	7afb      	ldrb	r3, [r7, #11]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da0e      	bge.n	80024f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	705a      	strb	r2, [r3, #1]
 80024ee:	e00e      	b.n	800250e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 0207 	and.w	r2, r3, #7
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_PCD_EP_Close+0x6a>
 8002524:	2302      	movs	r3, #2
 8002526:	e00e      	b.n	8002546 <HAL_PCD_EP_Close+0x88>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 f9f0 	bl	800491c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	460b      	mov	r3, r1
 800255c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	f003 0207 	and.w	r2, r3, #7
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b2da      	uxtb	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fba2 	bl	8004cf4 <USB_EPStartXfer>
 80025b0:	e005      	b.n	80025be <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fb9b 	bl	8004cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2201      	movs	r2, #1
 8002612:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	b2da      	uxtb	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fb5f 	bl	8004cf4 <USB_EPStartXfer>
 8002636:	e005      	b.n	8002644 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6979      	ldr	r1, [r7, #20]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fb58 	bl	8004cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 0207 	and.w	r2, r3, #7
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	d901      	bls.n	800266c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04c      	b.n	8002706 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800266c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da0e      	bge.n	8002692 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
 8002690:	e00c      	b.n	80026ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_PCD_EP_SetStall+0x7e>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e01c      	b.n	8002706 <HAL_PCD_EP_SetStall+0xb8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fe01 	bl	80062e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f003 ff26 	bl	8006548 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	f003 020f 	and.w	r2, r3, #15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d901      	bls.n	800272c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e040      	b.n	80027ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800272c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da0e      	bge.n	8002752 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
 8002750:	e00e      	b.n	8002770 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 0207 	and.w	r2, r3, #7
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_PCD_EP_ClrStall+0x82>
 800278c:	2302      	movs	r3, #2
 800278e:	e00e      	b.n	80027ae <HAL_PCD_EP_ClrStall+0xa0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fdef 	bl	8006382 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b08e      	sub	sp, #56	; 0x38
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027be:	e2ec      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027c8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80027d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8161 	bne.w	8002aa2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d152      	bne.n	8002890 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	81fb      	strh	r3, [r7, #14]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280a:	b29b      	uxth	r3, r3
 800280c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3328      	adds	r3, #40	; 0x28
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	3302      	adds	r3, #2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	441a      	add	r2, r3
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800284e:	2100      	movs	r1, #0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f005 fac6 	bl	8007de2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 829b 	beq.w	8002d9a <PCD_EP_ISR_Handler+0x5e4>
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 8296 	bne.w	8002d9a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800287a:	b2da      	uxtb	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b292      	uxth	r2, r2
 8002882:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800288e:	e284      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	3306      	adds	r3, #6
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f003 fe7c 	bl	80065e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028fa:	4013      	ands	r3, r2
 80028fc:	823b      	strh	r3, [r7, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	8a3a      	ldrh	r2, [r7, #16]
 8002904:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002908:	b292      	uxth	r2, r2
 800290a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f005 fa3b 	bl	8007d88 <HAL_PCD_SetupStageCallback>
 8002912:	e242      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002914:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002918:	2b00      	cmp	r3, #0
 800291a:	f280 823e 	bge.w	8002d9a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b29a      	uxth	r2, r3
 8002926:	f640 738f 	movw	r3, #3983	; 0xf8f
 800292a:	4013      	ands	r3, r2
 800292c:	83bb      	strh	r3, [r7, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	8bba      	ldrh	r2, [r7, #28]
 8002934:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002938:	b292      	uxth	r2, r2
 800293a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3306      	adds	r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d019      	beq.n	80029a4 <PCD_EP_ISR_Handler+0x1ee>
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	6959      	ldr	r1, [r3, #20]
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002988:	b29b      	uxth	r3, r3
 800298a:	f003 fe2c 	bl	80065e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	441a      	add	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800299c:	2100      	movs	r1, #0
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 fa04 	bl	8007dac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 81f2 	bne.w	8002d9a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <PCD_EP_ISR_Handler+0x24e>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e02f      	b.n	8002a64 <PCD_EP_ISR_Handler+0x2ae>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0a:	d813      	bhi.n	8002a34 <PCD_EP_ISR_Handler+0x27e>
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <PCD_EP_ISR_Handler+0x270>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3301      	adds	r3, #1
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	029b      	lsls	r3, r3, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e017      	b.n	8002a64 <PCD_EP_ISR_Handler+0x2ae>
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <PCD_EP_ISR_Handler+0x298>
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	827b      	strh	r3, [r7, #18]
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a7c:	827b      	strh	r3, [r7, #18]
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
 8002aa0:	e17b      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ab4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f280 80ea 	bge.w	8002c92 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aec:	b292      	uxth	r2, r2
 8002aee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002af0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d122      	bne.n	8002b54 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	3306      	adds	r3, #6
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b36:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8087 	beq.w	8002c4e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	6959      	ldr	r1, [r3, #20]
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	88da      	ldrh	r2, [r3, #6]
 8002b4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b4e:	f003 fd4a 	bl	80065e6 <USB_ReadPMA>
 8002b52:	e07c      	b.n	8002c4e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	78db      	ldrb	r3, [r3, #3]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d108      	bne.n	8002b6e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f927 	bl	8002db6 <HAL_PCD_EP_DB_Receive>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b6c:	e06f      	b.n	8002c4e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02a      	beq.n	8002c4e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	6959      	ldr	r1, [r3, #20]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	891a      	ldrh	r2, [r3, #8]
 8002c04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c06:	f003 fcee 	bl	80065e6 <USB_ReadPMA>
 8002c0a:	e020      	b.n	8002c4e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3306      	adds	r3, #6
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c34:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	895a      	ldrh	r2, [r3, #10]
 8002c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c4a:	f003 fccc 	bl	80065e6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c54:	441a      	add	r2, r3
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c60:	441a      	add	r2, r3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <PCD_EP_ISR_Handler+0x4c2>
 8002c6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d206      	bcs.n	8002c86 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f005 f894 	bl	8007dac <HAL_PCD_DataOutStageCallback>
 8002c84:	e005      	b.n	8002c92 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 f831 	bl	8004cf4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d07e      	beq.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	843b      	strh	r3, [r7, #32]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	8c3b      	ldrh	r3, [r7, #32]
 8002cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	78db      	ldrb	r3, [r3, #3]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d00c      	beq.n	8002d0a <PCD_EP_ISR_Handler+0x554>
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	78db      	ldrb	r3, [r3, #3]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d146      	bne.n	8002d8e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d141      	bne.n	8002d8e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d32:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	8bfb      	ldrh	r3, [r7, #30]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d906      	bls.n	8002d4c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	8bfb      	ldrh	r3, [r7, #30]
 8002d44:	1ad2      	subs	r2, r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e002      	b.n	8002d52 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 f83e 	bl	8007de2 <HAL_PCD_DataInStageCallback>
 8002d66:	e018      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	8bfb      	ldrh	r3, [r7, #30]
 8002d6e:	441a      	add	r2, r3
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	8bfb      	ldrh	r3, [r7, #30]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 ffb4 	bl	8004cf4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d8c:	e005      	b.n	8002d9a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d90:	461a      	mov	r2, r3
 8002d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f91b 	bl	8002fd0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f6ff ad0a 	blt.w	80027c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3738      	adds	r7, #56	; 0x38
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b088      	sub	sp, #32
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d07e      	beq.n	8002ecc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	3302      	adds	r3, #2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	8b7b      	ldrh	r3, [r7, #26]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d306      	bcc.n	8002e10 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	8b7b      	ldrh	r3, [r7, #26]
 8002e08:	1ad2      	subs	r2, r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	e002      	b.n	8002e16 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d123      	bne.n	8002e66 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e38:	833b      	strh	r3, [r7, #24]
 8002e3a:	8b3b      	ldrh	r3, [r7, #24]
 8002e3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e40:	833b      	strh	r3, [r7, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	441a      	add	r2, r3
 8002e50:	8b3b      	ldrh	r3, [r7, #24]
 8002e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01f      	beq.n	8002eb0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	82fb      	strh	r3, [r7, #22]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	8afb      	ldrh	r3, [r7, #22]
 8002e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eb0:	8b7b      	ldrh	r3, [r7, #26]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8087 	beq.w	8002fc6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6959      	ldr	r1, [r3, #20]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	891a      	ldrh	r2, [r3, #8]
 8002ec4:	8b7b      	ldrh	r3, [r7, #26]
 8002ec6:	f003 fb8e 	bl	80065e6 <USB_ReadPMA>
 8002eca:	e07c      	b.n	8002fc6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	8b7b      	ldrh	r3, [r7, #26]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d306      	bcc.n	8002f0e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	8b7b      	ldrh	r3, [r7, #26]
 8002f06:	1ad2      	subs	r2, r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	e002      	b.n	8002f14 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d123      	bne.n	8002f64 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	83fb      	strh	r3, [r7, #30]
 8002f38:	8bfb      	ldrh	r3, [r7, #30]
 8002f3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f3e:	83fb      	strh	r3, [r7, #30]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	8bfb      	ldrh	r3, [r7, #30]
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11f      	bne.n	8002fae <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f88:	83bb      	strh	r3, [r7, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	441a      	add	r2, r3
 8002f98:	8bbb      	ldrh	r3, [r7, #28]
 8002f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fae:	8b7b      	ldrh	r3, [r7, #26]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6959      	ldr	r1, [r3, #20]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	895a      	ldrh	r2, [r3, #10]
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	f003 fb10 	bl	80065e6 <USB_ReadPMA>
    }
  }

  return count;
 8002fc6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0a2      	sub	sp, #136	; 0x88
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 81c7 	beq.w	8003378 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3302      	adds	r3, #2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003012:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800301e:	429a      	cmp	r2, r3
 8003020:	d907      	bls.n	8003032 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	619a      	str	r2, [r3, #24]
 8003030:	e002      	b.n	8003038 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 80b9 	bne.w	80031b4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d126      	bne.n	8003098 <HAL_PCD_EP_DB_Transmit+0xc8>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	4413      	add	r3, r2
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	011a      	lsls	r2, r3, #4
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	4413      	add	r3, r2
 800306c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307c:	b29a      	uxth	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003090:	b29a      	uxth	r2, r3
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	e01a      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0xfe>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d116      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0xfe>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	4413      	add	r3, r2
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	011a      	lsls	r2, r3, #4
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	4413      	add	r3, r2
 80030c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	2200      	movs	r2, #0
 80030cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d126      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x15a>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	011a      	lsls	r2, r3, #4
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4413      	add	r3, r2
 80030fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800310e:	b29a      	uxth	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	801a      	strh	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003122:	b29a      	uxth	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	e017      	b.n	800315a <HAL_PCD_EP_DB_Transmit+0x18a>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d113      	bne.n	800315a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	011a      	lsls	r2, r3, #4
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	4413      	add	r3, r2
 800314e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f004 fe3e 	bl	8007de2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 82d1 	beq.w	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318c:	827b      	strh	r3, [r7, #18]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	8a7b      	ldrh	r3, [r7, #18]
 800319e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8013      	strh	r3, [r2, #0]
 80031b2:	e2af      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d021      	beq.n	8003202 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003208:	2b01      	cmp	r3, #1
 800320a:	f040 8283 	bne.w	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003216:	441a      	add	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003224:	441a      	add	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	d309      	bcc.n	800324a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003242:	1ad2      	subs	r2, r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	621a      	str	r2, [r3, #32]
 8003248:	e015      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003252:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003256:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003260:	e009      	b.n	8003276 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d155      	bne.n	800332a <HAL_PCD_EP_DB_Transmit+0x35a>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	4413      	add	r3, r2
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
 80032a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d112      	bne.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x302>
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e047      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x392>
 80032d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d4:	2b3e      	cmp	r3, #62	; 0x3e
 80032d6:	d811      	bhi.n	80032fc <HAL_PCD_EP_DB_Transmit+0x32c>
 80032d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
 80032de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_PCD_EP_DB_Transmit+0x31e>
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	3301      	adds	r3, #1
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
 80032ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	029b      	lsls	r3, r3, #10
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e032      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x392>
 80032fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	653b      	str	r3, [r7, #80]	; 0x50
 8003302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_PCD_EP_DB_Transmit+0x342>
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	3b01      	subs	r3, #1
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	b29b      	uxth	r3, r3
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	b29b      	uxth	r3, r3
 800331a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003322:	b29a      	uxth	r2, r3
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	801a      	strh	r2, [r3, #0]
 8003328:	e01b      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x392>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d117      	bne.n	8003362 <HAL_PCD_EP_DB_Transmit+0x392>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003340:	b29b      	uxth	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	4413      	add	r3, r2
 8003348:	643b      	str	r3, [r7, #64]	; 0x40
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	011a      	lsls	r2, r3, #4
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	4413      	add	r3, r2
 8003354:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335c:	b29a      	uxth	r2, r3
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003360:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	891a      	ldrh	r2, [r3, #8]
 800336e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003370:	b29b      	uxth	r3, r3
 8003372:	f003 f8f4 	bl	800655e <USB_WritePMA>
 8003376:	e1cd      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	3306      	adds	r3, #6
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d307      	bcc.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	619a      	str	r2, [r3, #24]
 80033be:	e002      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 80c1 	bne.w	8003552 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d126      	bne.n	8003426 <HAL_PCD_EP_DB_Transmit+0x456>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ec:	4413      	add	r3, r2
 80033ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f8:	4413      	add	r3, r2
 80033fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800340a:	b29a      	uxth	r2, r3
 800340c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341e:	b29a      	uxth	r2, r3
 8003420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	e01a      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x48c>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d116      	bne.n	800345c <HAL_PCD_EP_DB_Transmit+0x48c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	673b      	str	r3, [r7, #112]	; 0x70
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003442:	4413      	add	r3, r2
 8003444:	673b      	str	r3, [r7, #112]	; 0x70
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	011a      	lsls	r2, r3, #4
 800344c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344e:	4413      	add	r3, r2
 8003450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	2200      	movs	r2, #0
 800345a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d126      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0x4ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003480:	4413      	add	r3, r2
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	011a      	lsls	r2, r3, #4
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	4413      	add	r3, r2
 800348e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	e01c      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x524>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d118      	bne.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x524>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034d2:	4413      	add	r3, r2
 80034d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	011a      	lsls	r2, r3, #4
 80034de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034e2:	4413      	add	r3, r2
 80034e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f0:	2200      	movs	r2, #0
 80034f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f004 fc71 	bl	8007de2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 8104 	bne.w	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800353c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	8013      	strh	r3, [r2, #0]
 8003550:	e0e0      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d121      	bne.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	441a      	add	r2, r3
 8003588:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800358c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	f040 80b4 	bne.w	8003714 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035b4:	441a      	add	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035c2:	441a      	add	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d309      	bcc.n	80035e8 <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6a1a      	ldr	r2, [r3, #32]
 80035de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e0:	1ad2      	subs	r2, r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	621a      	str	r2, [r3, #32]
 80035e6:	e015      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 80035f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035fe:	e009      	b.n	8003614 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	667b      	str	r3, [r7, #100]	; 0x64
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d155      	bne.n	80036ce <HAL_PCD_EP_DB_Transmit+0x6fe>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003630:	b29b      	uxth	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003636:	4413      	add	r3, r2
 8003638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	011a      	lsls	r2, r3, #4
 8003640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003642:	4413      	add	r3, r2
 8003644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003648:	65bb      	str	r3, [r7, #88]	; 0x58
 800364a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364c:	2b00      	cmp	r3, #0
 800364e:	d112      	bne.n	8003676 <HAL_PCD_EP_DB_Transmit+0x6a6>
 8003650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800365a:	b29a      	uxth	r2, r3
 800365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366e:	b29a      	uxth	r2, r3
 8003670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e044      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x730>
 8003676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003678:	2b3e      	cmp	r3, #62	; 0x3e
 800367a:	d811      	bhi.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x6d0>
 800367c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	677b      	str	r3, [r7, #116]	; 0x74
 8003682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_PCD_EP_DB_Transmit+0x6c2>
 800368c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368e:	3301      	adds	r3, #1
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29a      	uxth	r2, r3
 800369a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e02f      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x730>
 80036a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	677b      	str	r3, [r7, #116]	; 0x74
 80036a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_PCD_EP_DB_Transmit+0x6e6>
 80036b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b2:	3b01      	subs	r3, #1
 80036b4:	677b      	str	r3, [r7, #116]	; 0x74
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	b29b      	uxth	r3, r3
 80036be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	e018      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x730>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d114      	bne.n	8003700 <HAL_PCD_EP_DB_Transmit+0x730>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e4:	4413      	add	r3, r2
 80036e6:	667b      	str	r3, [r7, #100]	; 0x64
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	011a      	lsls	r2, r3, #4
 80036ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036f0:	4413      	add	r3, r2
 80036f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036f6:	663b      	str	r3, [r7, #96]	; 0x60
 80036f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6959      	ldr	r1, [r3, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	895a      	ldrh	r2, [r3, #10]
 800370c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370e:	b29b      	uxth	r3, r3
 8003710:	f002 ff25 	bl	800655e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372e:	823b      	strh	r3, [r7, #16]
 8003730:	8a3b      	ldrh	r3, [r7, #16]
 8003732:	f083 0310 	eor.w	r3, r3, #16
 8003736:	823b      	strh	r3, [r7, #16]
 8003738:	8a3b      	ldrh	r3, [r7, #16]
 800373a:	f083 0320 	eor.w	r3, r3, #32
 800373e:	823b      	strh	r3, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	8a3b      	ldrh	r3, [r7, #16]
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3788      	adds	r7, #136	; 0x88
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
 800377c:	4613      	mov	r3, r2
 800377e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e009      	b.n	80037b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037a4:	897a      	ldrh	r2, [r7, #10]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037b8:	893b      	ldrh	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	80da      	strh	r2, [r3, #6]
 80037cc:	e00b      	b.n	80037e6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2201      	movs	r2, #1
 80037d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e26c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8087 	beq.w	8003922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003814:	4b92      	ldr	r3, [pc, #584]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00c      	beq.n	800383a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003820:	4b8f      	ldr	r3, [pc, #572]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d112      	bne.n	8003852 <HAL_RCC_OscConfig+0x5e>
 800382c:	4b8c      	ldr	r3, [pc, #560]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d10b      	bne.n	8003852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	4b89      	ldr	r3, [pc, #548]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d06c      	beq.n	8003920 <HAL_RCC_OscConfig+0x12c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d168      	bne.n	8003920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e246      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x76>
 800385c:	4b80      	ldr	r3, [pc, #512]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a7f      	ldr	r2, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e02e      	b.n	80038c8 <HAL_RCC_OscConfig+0xd4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x98>
 8003872:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7a      	ldr	r2, [pc, #488]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b78      	ldr	r3, [pc, #480]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a77      	ldr	r2, [pc, #476]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e01d      	b.n	80038c8 <HAL_RCC_OscConfig+0xd4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0xbc>
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a71      	ldr	r2, [pc, #452]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6e      	ldr	r2, [pc, #440]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e00b      	b.n	80038c8 <HAL_RCC_OscConfig+0xd4>
 80038b0:	4b6b      	ldr	r3, [pc, #428]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a67      	ldr	r2, [pc, #412]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d013      	beq.n	80038f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd f842 	bl	8000958 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fd f83e 	bl	8000958 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1fa      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe4>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd f82e 	bl	8000958 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fd f82a 	bl	8000958 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1e6      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x10c>
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800392e:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800393a:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d11c      	bne.n	8003980 <HAL_RCC_OscConfig+0x18c>
 8003946:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d116      	bne.n	8003980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_RCC_OscConfig+0x176>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e1ba      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4939      	ldr	r1, [pc, #228]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	e03a      	b.n	80039f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d020      	beq.n	80039ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_RCC_OscConfig+0x270>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fc ffe3 	bl	8000958 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003996:	f7fc ffdf 	bl	8000958 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e19b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4927      	ldr	r1, [pc, #156]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
 80039c8:	e015      	b.n	80039f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x270>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fc ffc2 	bl	8000958 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fc ffbe 	bl	8000958 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e17a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d03a      	beq.n	8003a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d019      	beq.n	8003a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a10:	f7fc ffa2 	bl	8000958 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a18:	f7fc ff9e 	bl	8000958 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e15a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a36:	2001      	movs	r0, #1
 8003a38:	f000 fac6 	bl	8003fc8 <RCC_Delay>
 8003a3c:	e01c      	b.n	8003a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a44:	f7fc ff88 	bl	8000958 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4a:	e00f      	b.n	8003a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4c:	f7fc ff84 	bl	8000958 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d908      	bls.n	8003a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e140      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000
 8003a64:	42420000 	.word	0x42420000
 8003a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b9e      	ldr	r3, [pc, #632]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e9      	bne.n	8003a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a6 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b97      	ldr	r3, [pc, #604]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b94      	ldr	r3, [pc, #592]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4a93      	ldr	r2, [pc, #588]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	61d3      	str	r3, [r2, #28]
 8003aa2:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	; (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d118      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abe:	4b8b      	ldr	r3, [pc, #556]	; (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a8a      	ldr	r2, [pc, #552]	; (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fc ff45 	bl	8000958 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fc ff41 	bl	8000958 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	; 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0fd      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b81      	ldr	r3, [pc, #516]	; (8003cec <HAL_RCC_OscConfig+0x4f8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x312>
 8003af8:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	e02d      	b.n	8003b62 <HAL_RCC_OscConfig+0x36e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x334>
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a75      	ldr	r2, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6213      	str	r3, [r2, #32]
 8003b1a:	4b73      	ldr	r3, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	e01c      	b.n	8003b62 <HAL_RCC_OscConfig+0x36e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d10c      	bne.n	8003b4a <HAL_RCC_OscConfig+0x356>
 8003b30:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a6c      	ldr	r2, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6213      	str	r3, [r2, #32]
 8003b48:	e00b      	b.n	8003b62 <HAL_RCC_OscConfig+0x36e>
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4a66      	ldr	r2, [pc, #408]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6213      	str	r3, [r2, #32]
 8003b56:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fc fef5 	bl	8000958 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fc fef1 	bl	8000958 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0ab      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ee      	beq.n	8003b72 <HAL_RCC_OscConfig+0x37e>
 8003b94:	e014      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7fc fedf 	bl	8000958 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fc fedb 	bl	8000958 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e095      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ee      	bne.n	8003b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4a47      	ldr	r2, [pc, #284]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8081 	beq.w	8003cde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bdc:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d061      	beq.n	8003cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d146      	bne.n	8003c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <HAL_RCC_OscConfig+0x4fc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7fc feaf 	bl	8000958 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fc feab 	bl	8000958 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e067      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c10:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d108      	bne.n	8003c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	492d      	ldr	r1, [pc, #180]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a19      	ldr	r1, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	4927      	ldr	r1, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x4fc>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fc fe7f 	bl	8000958 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fc fe7b 	bl	8000958 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e037      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x46a>
 8003c7c:	e02f      	b.n	8003cde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <HAL_RCC_OscConfig+0x4fc>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fc fe68 	bl	8000958 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fc fe64 	bl	8000958 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e020      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x498>
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e013      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42420060 	.word	0x42420060

08003cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0d0      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d910      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b67      	ldr	r3, [pc, #412]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 0207 	bic.w	r2, r3, #7
 8003d1e:	4965      	ldr	r1, [pc, #404]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d040      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d115      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e073      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06b      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4936      	ldr	r1, [pc, #216]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de4:	f7fc fdb8 	bl	8000958 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dec:	f7fc fdb4 	bl	8000958 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e053      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 020c 	and.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1eb      	bne.n	8003dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d210      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0207 	bic.w	r2, r3, #7
 8003e2a:	4922      	ldr	r1, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f821 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e86:	4601      	mov	r1, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	fa21 f303 	lsr.w	r3, r1, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc fd16 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800830c 	.word	0x0800830c
 8003ec0:	20000008 	.word	0x20000008
 8003ec4:	2000000c 	.word	0x2000000c

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b490      	push	{r4, r7}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ed0:	1d3c      	adds	r4, r7, #4
 8003ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d002      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x40>
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_GetSysClockFreq+0x46>
 8003f06:	e02d      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f0a:	623b      	str	r3, [r7, #32]
      break;
 8003f0c:	e02d      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	0c9b      	lsrs	r3, r3, #18
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	0c5b      	lsrs	r3, r3, #17
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f46:	fb02 f203 	mul.w	r2, r2, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
 8003f52:	e004      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	623b      	str	r3, [r7, #32]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f66:	623b      	str	r3, [r7, #32]
      break;
 8003f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc90      	pop	{r4, r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	080082b8 	.word	0x080082b8
 8003f7c:	080082c8 	.word	0x080082c8
 8003f80:	40021000 	.word	0x40021000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	003d0900 	.word	0x003d0900

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000008 	.word	0x20000008

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa4:	f7ff fff2 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fa8:	4601      	mov	r1, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4a03      	ldr	r2, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	0800831c 	.word	0x0800831c

08003fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <RCC_Delay+0x34>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <RCC_Delay+0x38>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fe4:	bf00      	nop
  }
  while (Delay --);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f9      	bne.n	8003fe4 <RCC_Delay+0x1c>
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000008 	.word	0x20000008
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d07d      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004024:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b4c      	ldr	r3, [pc, #304]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	61d3      	str	r3, [r2, #28]
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d118      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004058:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a42      	ldr	r2, [pc, #264]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004064:	f7fc fc78 	bl	8000958 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	e008      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fc fc74 	bl	8000958 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e06d      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02e      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d027      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b8:	4b2c      	ldr	r3, [pc, #176]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040be:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fc fc43 	bl	8000958 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fc fc3f 	bl	8000958 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e036      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4917      	ldr	r1, [pc, #92]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	4313      	orrs	r3, r2
 8004108:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	490b      	ldr	r1, [pc, #44]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4904      	ldr	r1, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
 800416c:	42420440 	.word	0x42420440

08004170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 0014 	add.w	r0, r7, #20
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr

08004190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4013      	ands	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004208:	b084      	sub	sp, #16
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	f107 0014 	add.w	r0, r7, #20
 8004216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr

08004248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004248:	b480      	push	{r7}
 800424a:	b09b      	sub	sp, #108	; 0x6c
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d81f      	bhi.n	80042ba <USB_ActivateEndpoint+0x72>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <USB_ActivateEndpoint+0x38>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042c3 	.word	0x080042c3
 800428c:	0800429f 	.word	0x0800429f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004290:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004298:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800429c:	e012      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800429e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042aa:	e00b      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042b8:	e004      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80042c0:	e000      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>
      break;
 80042c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	7b1b      	ldrb	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8149 	bne.w	80045c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8084 	beq.w	8004448 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	88db      	ldrh	r3, [r3, #6]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	81fb      	strh	r3, [r7, #14]
 8004382:	89fb      	ldrh	r3, [r7, #14]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <USB_ActivateEndpoint+0x17c>
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	81bb      	strh	r3, [r7, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	89bb      	ldrh	r3, [r7, #12]
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d020      	beq.n	800440e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e2:	813b      	strh	r3, [r7, #8]
 80043e4:	893b      	ldrh	r3, [r7, #8]
 80043e6:	f083 0320 	eor.w	r3, r3, #32
 80043ea:	813b      	strh	r3, [r7, #8]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
 800440c:	e27f      	b.n	800490e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
 8004446:	e262      	b.n	800490e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	4413      	add	r3, r2
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	4413      	add	r3, r2
 8004466:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	88db      	ldrh	r3, [r3, #6]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	4413      	add	r3, r2
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	011a      	lsls	r2, r3, #4
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	4413      	add	r3, r2
 800449a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d112      	bne.n	80044ce <USB_ActivateEndpoint+0x286>
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e02f      	b.n	800452e <USB_ActivateEndpoint+0x2e6>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b3e      	cmp	r3, #62	; 0x3e
 80044d4:	d813      	bhi.n	80044fe <USB_ActivateEndpoint+0x2b6>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	663b      	str	r3, [r7, #96]	; 0x60
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <USB_ActivateEndpoint+0x2a8>
 80044ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ec:	3301      	adds	r3, #1
 80044ee:	663b      	str	r3, [r7, #96]	; 0x60
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	e017      	b.n	800452e <USB_ActivateEndpoint+0x2e6>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	663b      	str	r3, [r7, #96]	; 0x60
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <USB_ActivateEndpoint+0x2d0>
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	3b01      	subs	r3, #1
 8004516:	663b      	str	r3, [r7, #96]	; 0x60
 8004518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451a:	b29b      	uxth	r3, r3
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	b29b      	uxth	r3, r3
 8004520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004528:	b29a      	uxth	r2, r3
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	83fb      	strh	r3, [r7, #30]
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01b      	beq.n	800457e <USB_ActivateEndpoint+0x336>
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455c:	83bb      	strh	r3, [r7, #28]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8bbb      	ldrh	r3, [r7, #28]
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	837b      	strh	r3, [r7, #26]
 8004596:	8b7b      	ldrh	r3, [r7, #26]
 8004598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800459c:	837b      	strh	r3, [r7, #26]
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045a4:	837b      	strh	r3, [r7, #26]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8b7b      	ldrh	r3, [r7, #26]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
 80045c6:	e1a2      	b.n	800490e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65bb      	str	r3, [r7, #88]	; 0x58
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004614:	4413      	add	r3, r2
 8004616:	65bb      	str	r3, [r7, #88]	; 0x58
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	011a      	lsls	r2, r3, #4
 800461e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004620:	4413      	add	r3, r2
 8004622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004626:	657b      	str	r3, [r7, #84]	; 0x54
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	891b      	ldrh	r3, [r3, #8]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	4413      	add	r3, r2
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	011a      	lsls	r2, r3, #4
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	4413      	add	r3, r2
 8004656:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	895b      	ldrh	r3, [r3, #10]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 8091 	bne.w	8004798 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01b      	beq.n	80046c6 <USB_ActivateEndpoint+0x47e>
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80046d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01b      	beq.n	8004716 <USB_ActivateEndpoint+0x4ce>
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800472e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004734:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004736:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800473c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800474a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475a:	b29b      	uxth	r3, r3
 800475c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004774:	867b      	strh	r3, [r7, #50]	; 0x32
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]
 8004796:	e0ba      	b.n	800490e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01d      	beq.n	80047f0 <USB_ActivateEndpoint+0x5a8>
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004800:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01d      	beq.n	8004848 <USB_ActivateEndpoint+0x600>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800483c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004844:	b29b      	uxth	r3, r3
 8004846:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	78db      	ldrb	r3, [r3, #3]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d024      	beq.n	800489a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004866:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800486a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800486e:	f083 0320 	eor.w	r3, r3, #32
 8004872:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]
 8004898:	e01d      	b.n	80048d6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490a:	b29b      	uxth	r3, r3
 800490c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800490e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004912:	4618      	mov	r0, r3
 8004914:	376c      	adds	r7, #108	; 0x6c
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800491c:	b480      	push	{r7}
 800491e:	b08d      	sub	sp, #52	; 0x34
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	7b1b      	ldrb	r3, [r3, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 808e 	bne.w	8004a4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d044      	beq.n	80049c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	81bb      	strh	r3, [r7, #12]
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <USB_DeactivateEndpoint+0x6c>
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	817b      	strh	r3, [r7, #10]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499e:	813b      	strh	r3, [r7, #8]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	893b      	ldrh	r3, [r7, #8]
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]
 80049c0:	e192      	b.n	8004ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	827b      	strh	r3, [r7, #18]
 80049d0:	8a7b      	ldrh	r3, [r7, #18]
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01b      	beq.n	8004a12 <USB_DeactivateEndpoint+0xf6>
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	823b      	strh	r3, [r7, #16]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8a3b      	ldrh	r3, [r7, #16]
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	81fb      	strh	r3, [r7, #14]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	89fb      	ldrh	r3, [r7, #14]
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
 8004a4a:	e14d      	b.n	8004ce8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 80a5 	bne.w	8004ba0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	843b      	strh	r3, [r7, #32]
 8004a64:	8c3b      	ldrh	r3, [r7, #32]
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01b      	beq.n	8004aa6 <USB_DeactivateEndpoint+0x18a>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	83fb      	strh	r3, [r7, #30]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	83bb      	strh	r3, [r7, #28]
 8004ab4:	8bbb      	ldrh	r3, [r7, #28]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <USB_DeactivateEndpoint+0x1da>
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	837b      	strh	r3, [r7, #26]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	8b7b      	ldrh	r3, [r7, #26]
 8004ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	833b      	strh	r3, [r7, #24]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8b3b      	ldrh	r3, [r7, #24]
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b44:	82fb      	strh	r3, [r7, #22]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	8afb      	ldrh	r3, [r7, #22]
 8004b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	82bb      	strh	r3, [r7, #20]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	8abb      	ldrh	r3, [r7, #20]
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]
 8004b9e:	e0a3      	b.n	8004ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <USB_DeactivateEndpoint+0x2d4>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <USB_DeactivateEndpoint+0x324>
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3734      	adds	r7, #52	; 0x34
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b0cc      	sub	sp, #304	; 0x130
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	6018      	str	r0, [r3, #0]
 8004cfe:	463b      	mov	r3, r7
 8004d00:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	f040 872e 	bne.w	8005b6a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	463b      	mov	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d905      	bls.n	8004d2a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d1e:	463b      	mov	r3, r7
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d28:	e004      	b.n	8004d34 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d34:	463b      	mov	r3, r7
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	7b1b      	ldrb	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d134      	bne.n	8004da8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d3e:	463b      	mov	r3, r7
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6959      	ldr	r1, [r3, #20]
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	88da      	ldrh	r2, [r3, #6]
 8004d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	1d38      	adds	r0, r7, #4
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	f001 fc03 	bl	800655e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d58:	f107 0310 	add.w	r3, r7, #16
 8004d5c:	1d3a      	adds	r2, r7, #4
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f107 0310 	add.w	r3, r7, #16
 8004d72:	f107 0210 	add.w	r2, r7, #16
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	440a      	add	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	011a      	lsls	r2, r3, #4
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	f000 beac 	b.w	8005b00 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004da8:	463b      	mov	r3, r7
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	78db      	ldrb	r3, [r3, #3]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	f040 838c 	bne.w	80054cc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004db4:	463b      	mov	r3, r7
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f240 8330 	bls.w	8005426 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 819e 	beq.w	8005174 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e3c:	1d3a      	adds	r2, r7, #4
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d17a      	bne.n	8004f42 <USB_EPStartXfer+0x24e>
 8004e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e50:	1d3a      	adds	r2, r7, #4
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	011a      	lsls	r2, r3, #4
 8004e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d11a      	bne.n	8004ec8 <USB_EPStartXfer+0x1d4>
 8004e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e062      	b.n	8004f8e <USB_EPStartXfer+0x29a>
 8004ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ece:	d819      	bhi.n	8004f04 <USB_EPStartXfer+0x210>
 8004ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <USB_EPStartXfer+0x1fc>
 8004ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eea:	3301      	adds	r3, #1
 8004eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	029b      	lsls	r3, r3, #10
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e044      	b.n	8004f8e <USB_EPStartXfer+0x29a>
 8004f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <USB_EPStartXfer+0x230>
 8004f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	029b      	lsls	r3, r3, #10
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e025      	b.n	8004f8e <USB_EPStartXfer+0x29a>
 8004f42:	463b      	mov	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d120      	bne.n	8004f8e <USB_EPStartXfer+0x29a>
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	440a      	add	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	463b      	mov	r3, r7
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	011a      	lsls	r2, r3, #4
 8004f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	895b      	ldrh	r3, [r3, #10]
 8004f94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fa8:	1d38      	adds	r0, r7, #4
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	f001 fad7 	bl	800655e <USB_WritePMA>
            ep->xfer_buff += len;
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fba:	441a      	add	r2, r3
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	463b      	mov	r3, r7
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d909      	bls.n	8004fe6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fdc:	1ad2      	subs	r2, r2, r3
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	621a      	str	r2, [r3, #32]
 8004fe4:	e008      	b.n	8004ff8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d17a      	bne.n	80050f8 <USB_EPStartXfer+0x404>
 8005002:	f107 0318 	add.w	r3, r7, #24
 8005006:	1d3a      	adds	r2, r7, #4
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005014:	b29b      	uxth	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	f107 0218 	add.w	r2, r7, #24
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	440a      	add	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	f107 0318 	add.w	r3, r7, #24
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4413      	add	r3, r2
 8005036:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11a      	bne.n	800507e <USB_EPStartXfer+0x38a>
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005056:	b29a      	uxth	r2, r3
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005072:	b29a      	uxth	r2, r3
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e067      	b.n	800514e <USB_EPStartXfer+0x45a>
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	2b3e      	cmp	r3, #62	; 0x3e
 8005084:	d819      	bhi.n	80050ba <USB_EPStartXfer+0x3c6>
 8005086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <USB_EPStartXfer+0x3b2>
 800509c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050a0:	3301      	adds	r3, #1
 80050a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e049      	b.n	800514e <USB_EPStartXfer+0x45a>
 80050ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <USB_EPStartXfer+0x3e6>
 80050d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050d4:	3b01      	subs	r3, #1
 80050d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050de:	b29b      	uxth	r3, r3
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	f107 0314 	add.w	r3, r7, #20
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	e02a      	b.n	800514e <USB_EPStartXfer+0x45a>
 80050f8:	463b      	mov	r3, r7
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d125      	bne.n	800514e <USB_EPStartXfer+0x45a>
 8005102:	f107 0320 	add.w	r3, r7, #32
 8005106:	1d3a      	adds	r2, r7, #4
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	f107 0320 	add.w	r3, r7, #32
 800511c:	f107 0220 	add.w	r2, r7, #32
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	440a      	add	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	011a      	lsls	r2, r3, #4
 800512e:	f107 0320 	add.w	r3, r7, #32
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800513a:	f107 031c 	add.w	r3, r7, #28
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005144:	b29a      	uxth	r2, r3
 8005146:	f107 031c 	add.w	r3, r7, #28
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	891b      	ldrh	r3, [r3, #8]
 8005154:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005158:	463b      	mov	r3, r7
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6959      	ldr	r1, [r3, #20]
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	b29b      	uxth	r3, r3
 8005164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005168:	1d38      	adds	r0, r7, #4
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	f001 f9f7 	bl	800655e <USB_WritePMA>
 8005170:	f000 bcc6 	b.w	8005b00 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d164      	bne.n	8005248 <USB_EPStartXfer+0x554>
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	4413      	add	r3, r2
 8005194:	64bb      	str	r3, [r7, #72]	; 0x48
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
 80051a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d112      	bne.n	80051d6 <USB_EPStartXfer+0x4e2>
 80051b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e057      	b.n	8005286 <USB_EPStartXfer+0x592>
 80051d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051da:	2b3e      	cmp	r3, #62	; 0x3e
 80051dc:	d817      	bhi.n	800520e <USB_EPStartXfer+0x51a>
 80051de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <USB_EPStartXfer+0x50a>
 80051f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051f8:	3301      	adds	r3, #1
 80051fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80051fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005202:	b29b      	uxth	r3, r3
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	b29a      	uxth	r2, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e03b      	b.n	8005286 <USB_EPStartXfer+0x592>
 800520e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <USB_EPStartXfer+0x53a>
 8005224:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005228:	3b01      	subs	r3, #1
 800522a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800522e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005232:	b29b      	uxth	r3, r3
 8005234:	029b      	lsls	r3, r3, #10
 8005236:	b29b      	uxth	r3, r3
 8005238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005240:	b29a      	uxth	r2, r3
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e01e      	b.n	8005286 <USB_EPStartXfer+0x592>
 8005248:	463b      	mov	r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d119      	bne.n	8005286 <USB_EPStartXfer+0x592>
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	653b      	str	r3, [r7, #80]	; 0x50
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005266:	4413      	add	r3, r2
 8005268:	653b      	str	r3, [r7, #80]	; 0x50
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	011a      	lsls	r2, r3, #4
 8005272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005274:	4413      	add	r3, r2
 8005276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005280:	b29a      	uxth	r2, r3
 8005282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005284:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	891b      	ldrh	r3, [r3, #8]
 800528c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005290:	463b      	mov	r3, r7
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6959      	ldr	r1, [r3, #20]
 8005296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529a:	b29b      	uxth	r3, r3
 800529c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052a0:	1d38      	adds	r0, r7, #4
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	f001 f95b 	bl	800655e <USB_WritePMA>
            ep->xfer_buff += len;
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	441a      	add	r2, r3
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d909      	bls.n	80052de <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	621a      	str	r2, [r3, #32]
 80052dc:	e008      	b.n	80052f0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	643b      	str	r3, [r7, #64]	; 0x40
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d164      	bne.n	80053ca <USB_EPStartXfer+0x6d6>
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	63bb      	str	r3, [r7, #56]	; 0x38
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	4413      	add	r3, r2
 8005316:	63bb      	str	r3, [r7, #56]	; 0x38
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	011a      	lsls	r2, r3, #4
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	4413      	add	r3, r2
 8005324:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d112      	bne.n	8005358 <USB_EPStartXfer+0x664>
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800533c:	b29a      	uxth	r2, r3
 800533e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005350:	b29a      	uxth	r2, r3
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e054      	b.n	8005402 <USB_EPStartXfer+0x70e>
 8005358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535c:	2b3e      	cmp	r3, #62	; 0x3e
 800535e:	d817      	bhi.n	8005390 <USB_EPStartXfer+0x69c>
 8005360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800536a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <USB_EPStartXfer+0x68c>
 8005376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800537a:	3301      	adds	r3, #1
 800537c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005380:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29a      	uxth	r2, r3
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e038      	b.n	8005402 <USB_EPStartXfer+0x70e>
 8005390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800539a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <USB_EPStartXfer+0x6bc>
 80053a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053aa:	3b01      	subs	r3, #1
 80053ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e01b      	b.n	8005402 <USB_EPStartXfer+0x70e>
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d116      	bne.n	8005402 <USB_EPStartXfer+0x70e>
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053dc:	b29b      	uxth	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	4413      	add	r3, r2
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f0:	4413      	add	r3, r2
 80053f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005400:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	895b      	ldrh	r3, [r3, #10]
 8005408:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	b29b      	uxth	r3, r3
 8005418:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800541c:	1d38      	adds	r0, r7, #4
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f001 f89d 	bl	800655e <USB_WritePMA>
 8005424:	e36c      	b.n	8005b00 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005426:	463b      	mov	r3, r7
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005470:	b29b      	uxth	r3, r3
 8005472:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005488:	4413      	add	r3, r2
 800548a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005496:	4413      	add	r3, r2
 8005498:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800549c:	65bb      	str	r3, [r7, #88]	; 0x58
 800549e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054a8:	463b      	mov	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	891b      	ldrh	r3, [r3, #8]
 80054ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6959      	ldr	r1, [r3, #20]
 80054b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054c2:	1d38      	adds	r0, r7, #4
 80054c4:	6800      	ldr	r0, [r0, #0]
 80054c6:	f001 f84a 	bl	800655e <USB_WritePMA>
 80054ca:	e319      	b.n	8005b00 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551a:	1ad2      	subs	r2, r2, r3
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8162 	beq.w	8005802 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d164      	bne.n	800561a <USB_EPStartXfer+0x926>
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	67bb      	str	r3, [r7, #120]	; 0x78
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005564:	4413      	add	r3, r2
 8005566:	67bb      	str	r3, [r7, #120]	; 0x78
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005572:	4413      	add	r3, r2
 8005574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005578:	677b      	str	r3, [r7, #116]	; 0x74
 800557a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d112      	bne.n	80055a8 <USB_EPStartXfer+0x8b4>
 8005582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558c:	b29a      	uxth	r2, r3
 800558e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e057      	b.n	8005658 <USB_EPStartXfer+0x964>
 80055a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ac:	2b3e      	cmp	r3, #62	; 0x3e
 80055ae:	d817      	bhi.n	80055e0 <USB_EPStartXfer+0x8ec>
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <USB_EPStartXfer+0x8dc>
 80055c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055ca:	3301      	adds	r3, #1
 80055cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	029b      	lsls	r3, r3, #10
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e03b      	b.n	8005658 <USB_EPStartXfer+0x964>
 80055e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <USB_EPStartXfer+0x90c>
 80055f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055fa:	3b01      	subs	r3, #1
 80055fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005600:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005604:	b29b      	uxth	r3, r3
 8005606:	029b      	lsls	r3, r3, #10
 8005608:	b29b      	uxth	r3, r3
 800560a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005612:	b29a      	uxth	r2, r3
 8005614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e01e      	b.n	8005658 <USB_EPStartXfer+0x964>
 800561a:	463b      	mov	r3, r7
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d119      	bne.n	8005658 <USB_EPStartXfer+0x964>
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005634:	4413      	add	r3, r2
 8005636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	011a      	lsls	r2, r3, #4
 8005642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005646:	4413      	add	r3, r2
 8005648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800564c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800564e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005652:	b29a      	uxth	r2, r3
 8005654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005656:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	895b      	ldrh	r3, [r3, #10]
 800565e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6959      	ldr	r1, [r3, #20]
 8005668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566c:	b29b      	uxth	r3, r3
 800566e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005672:	1d38      	adds	r0, r7, #4
 8005674:	6800      	ldr	r0, [r0, #0]
 8005676:	f000 ff72 	bl	800655e <USB_WritePMA>
          ep->xfer_buff += len;
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005684:	441a      	add	r2, r3
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	429a      	cmp	r2, r3
 800569a:	d909      	bls.n	80056b0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	621a      	str	r2, [r3, #32]
 80056ae:	e008      	b.n	80056c2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80056c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 821a 	beq.w	8005b00 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d164      	bne.n	80057a0 <USB_EPStartXfer+0xaac>
 80056d6:	1d3b      	adds	r3, r7, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	66bb      	str	r3, [r7, #104]	; 0x68
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ea:	4413      	add	r3, r2
 80056ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d112      	bne.n	800572e <USB_EPStartXfer+0xa3a>
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005712:	b29a      	uxth	r2, r3
 8005714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005726:	b29a      	uxth	r2, r3
 8005728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e057      	b.n	80057de <USB_EPStartXfer+0xaea>
 800572e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005732:	2b3e      	cmp	r3, #62	; 0x3e
 8005734:	d817      	bhi.n	8005766 <USB_EPStartXfer+0xa72>
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <USB_EPStartXfer+0xa62>
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	3301      	adds	r3, #1
 8005752:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29a      	uxth	r2, r3
 8005760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	e03b      	b.n	80057de <USB_EPStartXfer+0xaea>
 8005766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <USB_EPStartXfer+0xa92>
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	3b01      	subs	r3, #1
 8005782:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578a:	b29b      	uxth	r3, r3
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	b29b      	uxth	r3, r3
 8005790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005798:	b29a      	uxth	r2, r3
 800579a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e01e      	b.n	80057de <USB_EPStartXfer+0xaea>
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d119      	bne.n	80057de <USB_EPStartXfer+0xaea>
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	673b      	str	r3, [r7, #112]	; 0x70
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057be:	4413      	add	r3, r2
 80057c0:	673b      	str	r3, [r7, #112]	; 0x70
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057cc:	4413      	add	r3, r2
 80057ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	891b      	ldrh	r3, [r3, #8]
 80057e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6959      	ldr	r1, [r3, #20]
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057f8:	1d38      	adds	r0, r7, #4
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	f000 feaf 	bl	800655e <USB_WritePMA>
 8005800:	e17e      	b.n	8005b00 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005802:	463b      	mov	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d16f      	bne.n	80058ec <USB_EPStartXfer+0xbf8>
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581c:	b29b      	uxth	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005824:	4413      	add	r3, r2
 8005826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800582a:	463b      	mov	r3, r7
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	011a      	lsls	r2, r3, #4
 8005832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005836:	4413      	add	r3, r2
 8005838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d116      	bne.n	8005876 <USB_EPStartXfer+0xb82>
 8005848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e05f      	b.n	8005936 <USB_EPStartXfer+0xc42>
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	2b3e      	cmp	r3, #62	; 0x3e
 800587c:	d818      	bhi.n	80058b0 <USB_EPStartXfer+0xbbc>
 800587e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <USB_EPStartXfer+0xbaa>
 8005894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005898:	3301      	adds	r3, #1
 800589a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800589e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e042      	b.n	8005936 <USB_EPStartXfer+0xc42>
 80058b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <USB_EPStartXfer+0xbdc>
 80058c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e024      	b.n	8005936 <USB_EPStartXfer+0xc42>
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d11f      	bne.n	8005936 <USB_EPStartXfer+0xc42>
 80058f6:	1d3b      	adds	r3, r7, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800590e:	4413      	add	r3, r2
 8005910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005920:	4413      	add	r3, r2
 8005922:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800592a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592e:	b29a      	uxth	r2, r3
 8005930:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005934:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	891b      	ldrh	r3, [r3, #8]
 800593c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	b29b      	uxth	r3, r3
 800594c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005950:	1d38      	adds	r0, r7, #4
 8005952:	6800      	ldr	r0, [r0, #0]
 8005954:	f000 fe03 	bl	800655e <USB_WritePMA>
          ep->xfer_buff += len;
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	441a      	add	r2, r3
 8005964:	463b      	mov	r3, r7
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d909      	bls.n	800598e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	621a      	str	r2, [r3, #32]
 800598c:	e008      	b.n	80059a0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2200      	movs	r2, #0
 800599e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80ab 	beq.w	8005b00 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059b2:	463b      	mov	r3, r7
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d16f      	bne.n	8005a9c <USB_EPStartXfer+0xda8>
 80059bc:	1d3b      	adds	r3, r7, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059d4:	4413      	add	r3, r2
 80059d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059da:	463b      	mov	r3, r7
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	011a      	lsls	r2, r3, #4
 80059e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e6:	4413      	add	r3, r2
 80059e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <USB_EPStartXfer+0xd32>
 80059f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	e05b      	b.n	8005ade <USB_EPStartXfer+0xdea>
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2c:	d818      	bhi.n	8005a60 <USB_EPStartXfer+0xd6c>
 8005a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <USB_EPStartXfer+0xd5a>
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e03e      	b.n	8005ade <USB_EPStartXfer+0xdea>
 8005a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <USB_EPStartXfer+0xd8c>
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	029b      	lsls	r3, r3, #10
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e020      	b.n	8005ade <USB_EPStartXfer+0xdea>
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d11b      	bne.n	8005ade <USB_EPStartXfer+0xdea>
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	011a      	lsls	r2, r3, #4
 8005ac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ac8:	4413      	add	r3, r2
 8005aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005adc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	895b      	ldrh	r3, [r3, #10]
 8005ae4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005af8:	1d38      	adds	r0, r7, #4
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	f000 fd2f 	bl	800655e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f107 020a 	add.w	r2, r7, #10
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1e:	8013      	strh	r3, [r2, #0]
 8005b20:	f107 030a 	add.w	r3, r7, #10
 8005b24:	f107 020a 	add.w	r2, r7, #10
 8005b28:	8812      	ldrh	r2, [r2, #0]
 8005b2a:	f082 0210 	eor.w	r2, r2, #16
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	f107 030a 	add.w	r3, r7, #10
 8005b34:	f107 020a 	add.w	r2, r7, #10
 8005b38:	8812      	ldrh	r2, [r2, #0]
 8005b3a:	f082 0220 	eor.w	r2, r2, #32
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	f107 030a 	add.w	r3, r7, #10
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
 8005b68:	e3b5      	b.n	80062d6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	7b1b      	ldrb	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8090 	bne.w	8005c96 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d90e      	bls.n	8005ba4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	619a      	str	r2, [r3, #24]
 8005ba2:	e008      	b.n	8005bb6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bce:	4413      	add	r3, r2
 8005bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d116      	bne.n	8005c20 <USB_EPStartXfer+0xf2c>
 8005bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e32c      	b.n	800627a <USB_EPStartXfer+0x1586>
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	2b3e      	cmp	r3, #62	; 0x3e
 8005c26:	d818      	bhi.n	8005c5a <USB_EPStartXfer+0xf66>
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USB_EPStartXfer+0xf54>
 8005c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e30f      	b.n	800627a <USB_EPStartXfer+0x1586>
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <USB_EPStartXfer+0xf86>
 8005c70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e2f1      	b.n	800627a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f040 818f 	bne.w	8005fc0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d175      	bne.n	8005d98 <USB_EPStartXfer+0x10a4>
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <USB_EPStartXfer+0x1024>
 8005cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e065      	b.n	8005de4 <USB_EPStartXfer+0x10f0>
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d20:	d81a      	bhi.n	8005d58 <USB_EPStartXfer+0x1064>
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <USB_EPStartXfer+0x1052>
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	3301      	adds	r3, #1
 8005d42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e045      	b.n	8005de4 <USB_EPStartXfer+0x10f0>
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_EPStartXfer+0x1088>
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	3b01      	subs	r3, #1
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e025      	b.n	8005de4 <USB_EPStartXfer+0x10f0>
 8005d98:	463b      	mov	r3, r7
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d120      	bne.n	8005de4 <USB_EPStartXfer+0x10f0>
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dba:	4413      	add	r3, r2
 8005dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	011a      	lsls	r2, r3, #4
 8005dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	1d3b      	adds	r3, r7, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d175      	bne.n	8005ee2 <USB_EPStartXfer+0x11ee>
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e0e:	4413      	add	r3, r2
 8005e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	011a      	lsls	r2, r3, #4
 8005e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d116      	bne.n	8005e62 <USB_EPStartXfer+0x116e>
 8005e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	e061      	b.n	8005f26 <USB_EPStartXfer+0x1232>
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6a:	d81a      	bhi.n	8005ea2 <USB_EPStartXfer+0x11ae>
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <USB_EPStartXfer+0x119c>
 8005e86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	029b      	lsls	r3, r3, #10
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e041      	b.n	8005f26 <USB_EPStartXfer+0x1232>
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <USB_EPStartXfer+0x11d2>
 8005ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	029b      	lsls	r3, r3, #10
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e021      	b.n	8005f26 <USB_EPStartXfer+0x1232>
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d11c      	bne.n	8005f26 <USB_EPStartXfer+0x1232>
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005efc:	4413      	add	r3, r2
 8005efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	011a      	lsls	r2, r3, #4
 8005f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f0e:	4413      	add	r3, r2
 8005f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f26:	463b      	mov	r3, r7
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 81a4 	beq.w	800627a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f46:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <USB_EPStartXfer+0x126a>
 8005f52:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f5e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8187 	bne.w	800627a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f6c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8180 	bne.w	800627a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005f7a:	1d3b      	adds	r3, r7, #4
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]
 8005fbe:	e15c      	b.n	800627a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	f040 8155 	bne.w	8006276 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d90e      	bls.n	8005ffa <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005fdc:	463b      	mov	r3, r7
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	619a      	str	r2, [r3, #24]
 8005ff8:	e008      	b.n	800600c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2200      	movs	r2, #0
 800600a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800600c:	463b      	mov	r3, r7
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d16f      	bne.n	80060f6 <USB_EPStartXfer+0x1402>
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800602e:	4413      	add	r3, r2
 8006030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006040:	4413      	add	r3, r2
 8006042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <USB_EPStartXfer+0x138c>
 8006052:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800605e:	b29a      	uxth	r2, r3
 8006060:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e05f      	b.n	8006140 <USB_EPStartXfer+0x144c>
 8006080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006084:	2b3e      	cmp	r3, #62	; 0x3e
 8006086:	d818      	bhi.n	80060ba <USB_EPStartXfer+0x13c6>
 8006088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <USB_EPStartXfer+0x13b4>
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	3301      	adds	r3, #1
 80060a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e042      	b.n	8006140 <USB_EPStartXfer+0x144c>
 80060ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <USB_EPStartXfer+0x13e6>
 80060d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d4:	3b01      	subs	r3, #1
 80060d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060de:	b29b      	uxth	r3, r3
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	e024      	b.n	8006140 <USB_EPStartXfer+0x144c>
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11f      	bne.n	8006140 <USB_EPStartXfer+0x144c>
 8006100:	1d3b      	adds	r3, r7, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	4413      	add	r3, r2
 800611a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	011a      	lsls	r2, r3, #4
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612a:	4413      	add	r3, r2
 800612c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006130:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d16f      	bne.n	8006232 <USB_EPStartXfer+0x153e>
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616a:	4413      	add	r3, r2
 800616c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	011a      	lsls	r2, r3, #4
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	4413      	add	r3, r2
 800617e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d116      	bne.n	80061bc <USB_EPStartXfer+0x14c8>
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e05e      	b.n	800627a <USB_EPStartXfer+0x1586>
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	2b3e      	cmp	r3, #62	; 0x3e
 80061c2:	d818      	bhi.n	80061f6 <USB_EPStartXfer+0x1502>
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <USB_EPStartXfer+0x14f0>
 80061da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061de:	3301      	adds	r3, #1
 80061e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e041      	b.n	800627a <USB_EPStartXfer+0x1586>
 80061f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USB_EPStartXfer+0x1522>
 800620c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006210:	3b01      	subs	r3, #1
 8006212:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e023      	b.n	800627a <USB_EPStartXfer+0x1586>
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d11e      	bne.n	800627a <USB_EPStartXfer+0x1586>
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	4413      	add	r3, r2
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	011a      	lsls	r2, r3, #4
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	4413      	add	r3, r2
 8006260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e001      	b.n	800627a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e02e      	b.n	80062d8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	463b      	mov	r3, r7
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006294:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006298:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800629c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062ac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630a:	81bb      	strh	r3, [r7, #12]
 800630c:	89bb      	ldrh	r3, [r7, #12]
 800630e:	f083 0310 	eor.w	r3, r3, #16
 8006312:	81bb      	strh	r3, [r7, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	89bb      	ldrh	r3, [r7, #12]
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
 8006334:	e01f      	b.n	8006376 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634c:	81fb      	strh	r3, [r7, #14]
 800634e:	89fb      	ldrh	r3, [r7, #14]
 8006350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006354:	81fb      	strh	r3, [r7, #14]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	441a      	add	r2, r3
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	7b1b      	ldrb	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 809d 	bne.w	80064d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d04c      	beq.n	8006438 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	823b      	strh	r3, [r7, #16]
 80063ac:	8a3b      	ldrh	r3, [r7, #16]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01b      	beq.n	80063ee <USB_EPClearStall+0x6c>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	81fb      	strh	r3, [r7, #14]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	89fb      	ldrh	r3, [r7, #14]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	78db      	ldrb	r3, [r3, #3]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d06c      	beq.n	80064d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	81bb      	strh	r3, [r7, #12]
 800640e:	89bb      	ldrh	r3, [r7, #12]
 8006410:	f083 0320 	eor.w	r3, r3, #32
 8006414:	81bb      	strh	r3, [r7, #12]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	89bb      	ldrh	r3, [r7, #12]
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
 8006436:	e04b      	b.n	80064d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	82fb      	strh	r3, [r7, #22]
 8006446:	8afb      	ldrh	r3, [r7, #22]
 8006448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01b      	beq.n	8006488 <USB_EPClearStall+0x106>
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	82bb      	strh	r3, [r7, #20]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	8abb      	ldrh	r3, [r7, #20]
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	827b      	strh	r3, [r7, #18]
 80064a0:	8a7b      	ldrh	r3, [r7, #18]
 80064a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064a6:	827b      	strh	r3, [r7, #18]
 80064a8:	8a7b      	ldrh	r3, [r7, #18]
 80064aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064ae:	827b      	strh	r3, [r7, #18]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	8a7b      	ldrh	r3, [r7, #18]
 80064bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2280      	movs	r2, #128	; 0x80
 80064f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006538:	b29b      	uxth	r3, r3
 800653a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800655e:	b480      	push	{r7}
 8006560:	b08d      	sub	sp, #52	; 0x34
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	4611      	mov	r1, r2
 800656a:	461a      	mov	r2, r3
 800656c:	460b      	mov	r3, r1
 800656e:	80fb      	strh	r3, [r7, #6]
 8006570:	4613      	mov	r3, r2
 8006572:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006574:	88bb      	ldrh	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	005a      	lsls	r2, r3, #1
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006596:	e01e      	b.n	80065d6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	3301      	adds	r3, #1
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	3302      	adds	r3, #2
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	3302      	adds	r3, #2
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3301      	adds	r3, #1
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	3b01      	subs	r3, #1
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1dd      	bne.n	8006598 <USB_WritePMA+0x3a>
  }
}
 80065dc:	bf00      	nop
 80065de:	3734      	adds	r7, #52	; 0x34
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b08b      	sub	sp, #44	; 0x2c
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	4611      	mov	r1, r2
 80065f2:	461a      	mov	r2, r3
 80065f4:	460b      	mov	r3, r1
 80065f6:	80fb      	strh	r3, [r7, #6]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065fc:	88bb      	ldrh	r3, [r7, #4]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	005a      	lsls	r2, r3, #1
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006618:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	e01b      	b.n	8006658 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	3302      	adds	r3, #2
 800662c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	3301      	adds	r3, #1
 800663a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	b2da      	uxtb	r2, r3
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3301      	adds	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	3302      	adds	r3, #2
 8006650:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	3b01      	subs	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e0      	bne.n	8006620 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	701a      	strb	r2, [r3, #0]
  }
}
 800667a:	bf00      	nop
 800667c:	372c      	adds	r7, #44	; 0x2c
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006690:	2304      	movs	r3, #4
 8006692:	2203      	movs	r2, #3
 8006694:	2181      	movs	r1, #129	; 0x81
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fc75 	bl	8007f86 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80066a2:	2010      	movs	r0, #16
 80066a4:	f001 fd84 	bl	80081b0 <USBD_static_malloc>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e005      	b.n	80066ca <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	2200      	movs	r2, #0
 80066c6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80066de:	2181      	movs	r1, #129	; 0x81
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fc76 	bl	8007fd2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fd63 	bl	80081c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800673e:	2b00      	cmp	r3, #0
 8006740:	d045      	beq.n	80067ce <USBD_HID_Setup+0xba>
 8006742:	2b20      	cmp	r3, #32
 8006744:	f040 80d3 	bne.w	80068ee <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	3b02      	subs	r3, #2
 800674e:	2b09      	cmp	r3, #9
 8006750:	d835      	bhi.n	80067be <USBD_HID_Setup+0xaa>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <USBD_HID_Setup+0x44>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	080067af 	.word	0x080067af
 800675c:	0800678f 	.word	0x0800678f
 8006760:	080067bf 	.word	0x080067bf
 8006764:	080067bf 	.word	0x080067bf
 8006768:	080067bf 	.word	0x080067bf
 800676c:	080067bf 	.word	0x080067bf
 8006770:	080067bf 	.word	0x080067bf
 8006774:	080067bf 	.word	0x080067bf
 8006778:	0800679d 	.word	0x0800679d
 800677c:	08006781 	.word	0x08006781
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	885b      	ldrh	r3, [r3, #2]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	601a      	str	r2, [r3, #0]
          break;
 800678c:	e01e      	b.n	80067cc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2201      	movs	r2, #1
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f937 	bl	8007a08 <USBD_CtlSendData>
          break;
 800679a:	e017      	b.n	80067cc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	885b      	ldrh	r3, [r3, #2]
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]
          break;
 80067ac:	e00e      	b.n	80067cc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	3304      	adds	r3, #4
 80067b2:	2201      	movs	r2, #1
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 f926 	bl	8007a08 <USBD_CtlSendData>
          break;
 80067bc:	e006      	b.n	80067cc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f8b7 	bl	8007934 <USBD_CtlError>
          ret = USBD_FAIL;
 80067c6:	2302      	movs	r3, #2
 80067c8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ca:	bf00      	nop
      }
      break;
 80067cc:	e096      	b.n	80068fc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	2b0b      	cmp	r3, #11
 80067d4:	f200 8083 	bhi.w	80068de <USBD_HID_Setup+0x1ca>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <USBD_HID_Setup+0xcc>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006811 	.word	0x08006811
 80067e4:	080068df 	.word	0x080068df
 80067e8:	080068df 	.word	0x080068df
 80067ec:	080068df 	.word	0x080068df
 80067f0:	080068df 	.word	0x080068df
 80067f4:	080068df 	.word	0x080068df
 80067f8:	08006839 	.word	0x08006839
 80067fc:	080068df 	.word	0x080068df
 8006800:	080068df 	.word	0x080068df
 8006804:	080068df 	.word	0x080068df
 8006808:	08006891 	.word	0x08006891
 800680c:	080068b9 	.word	0x080068b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800681a:	f107 030e 	add.w	r3, r7, #14
 800681e:	2202      	movs	r2, #2
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 f8f0 	bl	8007a08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006828:	e060      	b.n	80068ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f881 	bl	8007934 <USBD_CtlError>
            ret = USBD_FAIL;
 8006832:	2302      	movs	r3, #2
 8006834:	75fb      	strb	r3, [r7, #23]
          break;
 8006836:	e059      	b.n	80068ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	0a1b      	lsrs	r3, r3, #8
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b22      	cmp	r3, #34	; 0x22
 8006842:	d108      	bne.n	8006856 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	88db      	ldrh	r3, [r3, #6]
 8006848:	2b4a      	cmp	r3, #74	; 0x4a
 800684a:	bf28      	it	cs
 800684c:	234a      	movcs	r3, #74	; 0x4a
 800684e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006850:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <USBD_HID_Setup+0x1f4>)
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e015      	b.n	8006882 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b21      	cmp	r3, #33	; 0x21
 8006860:	d108      	bne.n	8006874 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <USBD_HID_Setup+0x1f8>)
 8006864:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	88db      	ldrh	r3, [r3, #6]
 800686a:	2b09      	cmp	r3, #9
 800686c:	bf28      	it	cs
 800686e:	2309      	movcs	r3, #9
 8006870:	83fb      	strh	r3, [r7, #30]
 8006872:	e006      	b.n	8006882 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 f85c 	bl	8007934 <USBD_CtlError>
            ret = USBD_FAIL;
 800687c:	2302      	movs	r3, #2
 800687e:	75fb      	strb	r3, [r7, #23]
            break;
 8006880:	e034      	b.n	80068ec <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006882:	8bfb      	ldrh	r3, [r7, #30]
 8006884:	461a      	mov	r2, r3
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 f8bd 	bl	8007a08 <USBD_CtlSendData>
          break;
 800688e:	e02d      	b.n	80068ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006896:	2b03      	cmp	r3, #3
 8006898:	d107      	bne.n	80068aa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3308      	adds	r3, #8
 800689e:	2201      	movs	r2, #1
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f8b0 	bl	8007a08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068a8:	e020      	b.n	80068ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f841 	bl	8007934 <USBD_CtlError>
            ret = USBD_FAIL;
 80068b2:	2302      	movs	r3, #2
 80068b4:	75fb      	strb	r3, [r7, #23]
          break;
 80068b6:	e019      	b.n	80068ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d106      	bne.n	80068d0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	885b      	ldrh	r3, [r3, #2]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ce:	e00d      	b.n	80068ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 f82e 	bl	8007934 <USBD_CtlError>
            ret = USBD_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	75fb      	strb	r3, [r7, #23]
          break;
 80068dc:	e006      	b.n	80068ec <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f827 	bl	8007934 <USBD_CtlError>
          ret = USBD_FAIL;
 80068e6:	2302      	movs	r3, #2
 80068e8:	75fb      	strb	r3, [r7, #23]
          break;
 80068ea:	bf00      	nop
      }
      break;
 80068ec:	e006      	b.n	80068fc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 f81f 	bl	8007934 <USBD_CtlError>
      ret = USBD_FAIL;
 80068f6:	2302      	movs	r3, #2
 80068f8:	75fb      	strb	r3, [r7, #23]
      break;
 80068fa:	bf00      	nop
  }

  return ret;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200000d0 	.word	0x200000d0
 800690c:	200000b8 	.word	0x200000b8

08006910 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	2b03      	cmp	r3, #3
 800692e:	d10c      	bne.n	800694a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	7b1b      	ldrb	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2201      	movs	r2, #1
 800693c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	2181      	movs	r1, #129	; 0x81
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f001 fbec 	bl	8008122 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2222      	movs	r2, #34	; 0x22
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000004c 	.word	0x2000004c

08006974 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2222      	movs	r2, #34	; 0x22
 8006980:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000070 	.word	0x20000070

08006994 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2222      	movs	r2, #34	; 0x22
 80069a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000094 	.word	0x20000094

080069b4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	2200      	movs	r2, #0
 80069c8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
	...

080069d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	220a      	movs	r2, #10
 80069e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80069e6:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200000c4 	.word	0x200000c4

080069f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e01a      	b.n	8006a46 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	79fa      	ldrb	r2, [r7, #7]
 8006a3c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 fa3e 	bl	8007ec0 <USBD_LL_Init>

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d006      	beq.n	8006a70 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	e001      	b.n	8006a74 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a70:	2302      	movs	r3, #2
 8006a72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fa61 	bl	8007f50 <USBD_LL_Start>

  return USBD_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00c      	beq.n	8006ae0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3

  return USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 feca 	bl	80078bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d00c      	beq.n	8006b66 <USBD_LL_SetupStage+0x56>
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d302      	bcc.n	8006b56 <USBD_LL_SetupStage+0x46>
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d010      	beq.n	8006b76 <USBD_LL_SetupStage+0x66>
 8006b54:	e017      	b.n	8006b86 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9ca 	bl	8006ef8 <USBD_StdDevReq>
      break;
 8006b64:	e01a      	b.n	8006b9c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa2c 	bl	8006fcc <USBD_StdItfReq>
      break;
 8006b74:	e012      	b.n	8006b9c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa6a 	bl	8007058 <USBD_StdEPReq>
      break;
 8006b84:	e00a      	b.n	8006b9c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fa3b 	bl	8008010 <USBD_LL_StallEP>
      break;
 8006b9a:	bf00      	nop
  }

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d14b      	bne.n	8006c52 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d134      	bne.n	8006c36 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d919      	bls.n	8006c0c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d203      	bcs.n	8006bfa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	e002      	b.n	8006c00 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 ff2d 	bl	8007a64 <USBD_CtlContinueRx>
 8006c0a:	e038      	b.n	8006c7e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d105      	bne.n	8006c2e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 ff2a 	bl	8007a88 <USBD_CtlSendStatus>
 8006c34:	e023      	b.n	8006c7e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d11e      	bne.n	8006c7e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f001 f9e0 	bl	8008010 <USBD_LL_StallEP>
 8006c50:	e015      	b.n	8006c7e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d108      	bne.n	8006c7a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	7afa      	ldrb	r2, [r7, #11]
 8006c72:	4611      	mov	r1, r2
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	4798      	blx	r3
 8006c78:	e001      	b.n	8006c7e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e000      	b.n	8006c80 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	460b      	mov	r3, r1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c96:	7afb      	ldrb	r3, [r7, #11]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d17f      	bne.n	8006d9c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d15c      	bne.n	8006d66 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d915      	bls.n	8006ce4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	1ad2      	subs	r2, r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 feb5 	bl	8007a40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f001 fa43 	bl	8008168 <USBD_LL_PrepareReceive>
 8006ce2:	e04e      	b.n	8006d82 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	6912      	ldr	r2, [r2, #16]
 8006cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf0:	fb02 f201 	mul.w	r2, r2, r1
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d11c      	bne.n	8006d34 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d316      	bcc.n	8006d34 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d20f      	bcs.n	8006d34 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d14:	2200      	movs	r2, #0
 8006d16:	2100      	movs	r1, #0
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fe91 	bl	8007a40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fa1b 	bl	8008168 <USBD_LL_PrepareReceive>
 8006d32:	e026      	b.n	8006d82 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d105      	bne.n	8006d56 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d56:	2180      	movs	r1, #128	; 0x80
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 f959 	bl	8008010 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fea5 	bl	8007aae <USBD_CtlReceiveStatus>
 8006d64:	e00d      	b.n	8006d82 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d004      	beq.n	8006d7a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f001 f947 	bl	8008010 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d11d      	bne.n	8006dc8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fe83 	bl	8006a98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d9a:	e015      	b.n	8006dc8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00d      	beq.n	8006dc4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d108      	bne.n	8006dc4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	7afa      	ldrb	r2, [r7, #11]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	4798      	blx	r3
 8006dc2:	e001      	b.n	8006dc8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e000      	b.n	8006dca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f8d0 	bl	8007f86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2240      	movs	r2, #64	; 0x40
 8006df2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f8c2 	bl	8007f86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2240      	movs	r2, #64	; 0x40
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	4611      	mov	r1, r2
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
  }

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d105      	bne.n	8006eb8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d10b      	bne.n	8006eee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d004      	beq.n	8006f1c <USBD_StdDevReq+0x24>
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d002      	beq.n	8006f1c <USBD_StdDevReq+0x24>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <USBD_StdDevReq+0x34>
 8006f1a:	e04c      	b.n	8006fb6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      break;
 8006f2a:	e049      	b.n	8006fc0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d83a      	bhi.n	8006faa <USBD_StdDevReq+0xb2>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <USBD_StdDevReq+0x44>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f8d 	.word	0x08006f8d
 8006f40:	08006fa1 	.word	0x08006fa1
 8006f44:	08006fab 	.word	0x08006fab
 8006f48:	08006f97 	.word	0x08006f97
 8006f4c:	08006fab 	.word	0x08006fab
 8006f50:	08006f6f 	.word	0x08006f6f
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006fab 	.word	0x08006fab
 8006f5c:	08006f83 	.word	0x08006f83
 8006f60:	08006f79 	.word	0x08006f79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9d4 	bl	8007314 <USBD_GetDescriptor>
          break;
 8006f6c:	e022      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb37 	bl	80075e4 <USBD_SetAddress>
          break;
 8006f76:	e01d      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fb74 	bl	8007668 <USBD_SetConfig>
          break;
 8006f80:	e018      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbfd 	bl	8007784 <USBD_GetConfig>
          break;
 8006f8a:	e013      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fc2c 	bl	80077ec <USBD_GetStatus>
          break;
 8006f94:	e00e      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fc5a 	bl	8007852 <USBD_SetFeature>
          break;
 8006f9e:	e009      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fc69 	bl	800787a <USBD_ClrFeature>
          break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fcc1 	bl	8007934 <USBD_CtlError>
          break;
 8006fb2:	bf00      	nop
      }
      break;
 8006fb4:	e004      	b.n	8006fc0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fcbb 	bl	8007934 <USBD_CtlError>
      break;
 8006fbe:	bf00      	nop
  }

  return ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop

08006fcc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d003      	beq.n	8006fee <USBD_StdItfReq+0x22>
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d001      	beq.n	8006fee <USBD_StdItfReq+0x22>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d12a      	bne.n	8007044 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d81d      	bhi.n	8007036 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d813      	bhi.n	800702c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d110      	bne.n	8007040 <USBD_StdItfReq+0x74>
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fd2f 	bl	8007a88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800702a:	e009      	b.n	8007040 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc80 	bl	8007934 <USBD_CtlError>
          break;
 8007034:	e004      	b.n	8007040 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc7b 	bl	8007934 <USBD_CtlError>
          break;
 800703e:	e000      	b.n	8007042 <USBD_StdItfReq+0x76>
          break;
 8007040:	bf00      	nop
      }
      break;
 8007042:	e004      	b.n	800704e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc74 	bl	8007934 <USBD_CtlError>
      break;
 800704c:	bf00      	nop
  }

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	889b      	ldrh	r3, [r3, #4]
 800706a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007074:	2b20      	cmp	r3, #32
 8007076:	d004      	beq.n	8007082 <USBD_StdEPReq+0x2a>
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d002      	beq.n	8007082 <USBD_StdEPReq+0x2a>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <USBD_StdEPReq+0x3a>
 8007080:	e13d      	b.n	80072fe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
      break;
 8007090:	e13a      	b.n	8007308 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709a:	2b20      	cmp	r3, #32
 800709c:	d10a      	bne.n	80070b4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	e12a      	b.n	800730a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d03e      	beq.n	800713a <USBD_StdEPReq+0xe2>
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d002      	beq.n	80070c6 <USBD_StdEPReq+0x6e>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d070      	beq.n	80071a6 <USBD_StdEPReq+0x14e>
 80070c4:	e115      	b.n	80072f2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d002      	beq.n	80070d6 <USBD_StdEPReq+0x7e>
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d015      	beq.n	8007100 <USBD_StdEPReq+0xa8>
 80070d4:	e02b      	b.n	800712e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00c      	beq.n	80070f6 <USBD_StdEPReq+0x9e>
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b80      	cmp	r3, #128	; 0x80
 80070e0:	d009      	beq.n	80070f6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 ff92 	bl	8008010 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff8e 	bl	8008010 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070f4:	e020      	b.n	8007138 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc1b 	bl	8007934 <USBD_CtlError>
              break;
 80070fe:	e01b      	b.n	8007138 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10e      	bne.n	8007126 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <USBD_StdEPReq+0xce>
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d008      	beq.n	8007126 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	88db      	ldrh	r3, [r3, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 ff75 	bl	8008010 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fcae 	bl	8007a88 <USBD_CtlSendStatus>

              break;
 800712c:	e004      	b.n	8007138 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fbff 	bl	8007934 <USBD_CtlError>
              break;
 8007136:	bf00      	nop
          }
          break;
 8007138:	e0e0      	b.n	80072fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <USBD_StdEPReq+0xf2>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d015      	beq.n	8007174 <USBD_StdEPReq+0x11c>
 8007148:	e026      	b.n	8007198 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <USBD_StdEPReq+0x112>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d009      	beq.n	800716a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 ff58 	bl	8008010 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 ff54 	bl	8008010 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007168:	e01c      	b.n	80071a4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fbe1 	bl	8007934 <USBD_CtlError>
              break;
 8007172:	e017      	b.n	80071a4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d112      	bne.n	80071a2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 ff5f 	bl	800804e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc79 	bl	8007a88 <USBD_CtlSendStatus>
              }
              break;
 8007196:	e004      	b.n	80071a2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fbca 	bl	8007934 <USBD_CtlError>
              break;
 80071a0:	e000      	b.n	80071a4 <USBD_StdEPReq+0x14c>
              break;
 80071a2:	bf00      	nop
          }
          break;
 80071a4:	e0aa      	b.n	80072fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d002      	beq.n	80071b6 <USBD_StdEPReq+0x15e>
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d032      	beq.n	800721a <USBD_StdEPReq+0x1c2>
 80071b4:	e097      	b.n	80072e6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <USBD_StdEPReq+0x174>
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d004      	beq.n	80071cc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fbb5 	bl	8007934 <USBD_CtlError>
                break;
 80071ca:	e091      	b.n	80072f0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da0b      	bge.n	80071ec <USBD_StdEPReq+0x194>
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	3310      	adds	r3, #16
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	3304      	adds	r3, #4
 80071ea:	e00b      	b.n	8007204 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	3304      	adds	r3, #4
 8007204:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2202      	movs	r2, #2
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fbf8 	bl	8007a08 <USBD_CtlSendData>
              break;
 8007218:	e06a      	b.n	80072f0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da11      	bge.n	8007246 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3318      	adds	r3, #24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d117      	bne.n	800726c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fb78 	bl	8007934 <USBD_CtlError>
                  break;
 8007244:	e054      	b.n	80072f0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb65 	bl	8007934 <USBD_CtlError>
                  break;
 800726a:	e041      	b.n	80072f0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800726c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da0b      	bge.n	800728c <USBD_StdEPReq+0x234>
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	3310      	adds	r3, #16
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	3304      	adds	r3, #4
 800728a:	e00b      	b.n	80072a4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	3304      	adds	r3, #4
 80072a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <USBD_StdEPReq+0x25a>
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b80      	cmp	r3, #128	; 0x80
 80072b0:	d103      	bne.n	80072ba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e00e      	b.n	80072d8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fee4 	bl	800808c <USBD_LL_IsStallEP>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2202      	movs	r2, #2
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fb92 	bl	8007a08 <USBD_CtlSendData>
              break;
 80072e4:	e004      	b.n	80072f0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fb23 	bl	8007934 <USBD_CtlError>
              break;
 80072ee:	bf00      	nop
          }
          break;
 80072f0:	e004      	b.n	80072fc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb1d 	bl	8007934 <USBD_CtlError>
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e004      	b.n	8007308 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb17 	bl	8007934 <USBD_CtlError>
      break;
 8007306:	bf00      	nop
  }

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	0a1b      	lsrs	r3, r3, #8
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	2b06      	cmp	r3, #6
 8007336:	f200 8128 	bhi.w	800758a <USBD_GetDescriptor+0x276>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <USBD_GetDescriptor+0x2c>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	0800735d 	.word	0x0800735d
 8007344:	08007375 	.word	0x08007375
 8007348:	080073b5 	.word	0x080073b5
 800734c:	0800758b 	.word	0x0800758b
 8007350:	0800758b 	.word	0x0800758b
 8007354:	0800752b 	.word	0x0800752b
 8007358:	08007557 	.word	0x08007557
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c12      	ldrb	r2, [r2, #16]
 8007368:	f107 0108 	add.w	r1, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
      break;
 8007372:	e112      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	7c1b      	ldrb	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007396:	e100      	b.n	800759a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	f107 0208 	add.w	r2, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	2202      	movs	r2, #2
 80073b0:	701a      	strb	r2, [r3, #0]
      break;
 80073b2:	e0f2      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	f200 80ac 	bhi.w	8007518 <USBD_GetDescriptor+0x204>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <USBD_GetDescriptor+0xb4>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073e1 	.word	0x080073e1
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007449 	.word	0x08007449
 80073d4:	0800747d 	.word	0x0800747d
 80073d8:	080074b1 	.word	0x080074b1
 80073dc:	080074e5 	.word	0x080074e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	7c12      	ldrb	r2, [r2, #16]
 80073f8:	f107 0108 	add.w	r1, r7, #8
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007402:	e091      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa94 	bl	8007934 <USBD_CtlError>
            err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
          break;
 8007412:	e089      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	7c12      	ldrb	r2, [r2, #16]
 800742c:	f107 0108 	add.w	r1, r7, #8
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007436:	e077      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa7a 	bl	8007934 <USBD_CtlError>
            err++;
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	3301      	adds	r3, #1
 8007444:	72fb      	strb	r3, [r7, #11]
          break;
 8007446:	e06f      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800746a:	e05d      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa60 	bl	8007934 <USBD_CtlError>
            err++;
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	3301      	adds	r3, #1
 8007478:	72fb      	strb	r3, [r7, #11]
          break;
 800747a:	e055      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7c12      	ldrb	r2, [r2, #16]
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749e:	e043      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa46 	bl	8007934 <USBD_CtlError>
            err++;
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	3301      	adds	r3, #1
 80074ac:	72fb      	strb	r3, [r7, #11]
          break;
 80074ae:	e03b      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d2:	e029      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa2c 	bl	8007934 <USBD_CtlError>
            err++;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	3301      	adds	r3, #1
 80074e0:	72fb      	strb	r3, [r7, #11]
          break;
 80074e2:	e021      	b.n	8007528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007506:	e00f      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa12 	bl	8007934 <USBD_CtlError>
            err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
          break;
 8007516:	e007      	b.n	8007528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa0a 	bl	8007934 <USBD_CtlError>
          err++;
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	3301      	adds	r3, #1
 8007524:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007526:	e038      	b.n	800759a <USBD_GetDescriptor+0x286>
 8007528:	e037      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1b      	ldrb	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	4610      	mov	r0, r2
 8007540:	4798      	blx	r3
 8007542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007544:	e029      	b.n	800759a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9f3 	bl	8007934 <USBD_CtlError>
        err++;
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	3301      	adds	r3, #1
 8007552:	72fb      	strb	r3, [r7, #11]
      break;
 8007554:	e021      	b.n	800759a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7c1b      	ldrb	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f107 0208 	add.w	r2, r7, #8
 800756a:	4610      	mov	r0, r2
 800756c:	4798      	blx	r3
 800756e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	2207      	movs	r2, #7
 8007576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007578:	e00f      	b.n	800759a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f9d9 	bl	8007934 <USBD_CtlError>
        err++;
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	3301      	adds	r3, #1
 8007586:	72fb      	strb	r3, [r7, #11]
      break;
 8007588:	e007      	b.n	800759a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9d1 	bl	8007934 <USBD_CtlError>
      err++;
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	3301      	adds	r3, #1
 8007596:	72fb      	strb	r3, [r7, #11]
      break;
 8007598:	bf00      	nop
  }

  if (err != 0U)
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11c      	bne.n	80075da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075a0:	893b      	ldrh	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d011      	beq.n	80075ca <USBD_GetDescriptor+0x2b6>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	88da      	ldrh	r2, [r3, #6]
 80075b2:	893b      	ldrh	r3, [r7, #8]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bf28      	it	cs
 80075b8:	4613      	movcs	r3, r2
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075be:	893b      	ldrh	r3, [r7, #8]
 80075c0:	461a      	mov	r2, r3
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fa1f 	bl	8007a08 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa58 	bl	8007a88 <USBD_CtlSendStatus>
 80075d8:	e000      	b.n	80075dc <USBD_GetDescriptor+0x2c8>
    return;
 80075da:	bf00      	nop
    }
  }
}
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop

080075e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	889b      	ldrh	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d130      	bne.n	8007658 <USBD_SetAddress+0x74>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d12c      	bne.n	8007658 <USBD_SetAddress+0x74>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	2b7f      	cmp	r3, #127	; 0x7f
 8007604:	d828      	bhi.n	8007658 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	2b03      	cmp	r3, #3
 800761a:	d104      	bne.n	8007626 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f988 	bl	8007934 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	e01c      	b.n	8007660 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7bfa      	ldrb	r2, [r7, #15]
 800762a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fd56 	bl	80080e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fa25 	bl	8007a88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	e008      	b.n	8007660 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007656:	e003      	b.n	8007660 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f96a 	bl	8007934 <USBD_CtlError>
  }
}
 8007660:	bf00      	nop
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	4b41      	ldr	r3, [pc, #260]	; (8007780 <USBD_SetConfig+0x118>)
 800767a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800767c:	4b40      	ldr	r3, [pc, #256]	; (8007780 <USBD_SetConfig+0x118>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d904      	bls.n	800768e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f954 	bl	8007934 <USBD_CtlError>
 800768c:	e075      	b.n	800777a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	2b02      	cmp	r3, #2
 8007696:	d002      	beq.n	800769e <USBD_SetConfig+0x36>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d023      	beq.n	80076e4 <USBD_SetConfig+0x7c>
 800769c:	e062      	b.n	8007764 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800769e:	4b38      	ldr	r3, [pc, #224]	; (8007780 <USBD_SetConfig+0x118>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01a      	beq.n	80076dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076a6:	4b36      	ldr	r3, [pc, #216]	; (8007780 <USBD_SetConfig+0x118>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2203      	movs	r2, #3
 80076b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076b8:	4b31      	ldr	r3, [pc, #196]	; (8007780 <USBD_SetConfig+0x118>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff f9f4 	bl	8006aac <USBD_SetClassConfig>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d104      	bne.n	80076d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f931 	bl	8007934 <USBD_CtlError>
            return;
 80076d2:	e052      	b.n	800777a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f9d7 	bl	8007a88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076da:	e04e      	b.n	800777a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9d3 	bl	8007a88 <USBD_CtlSendStatus>
        break;
 80076e2:	e04a      	b.n	800777a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076e4:	4b26      	ldr	r3, [pc, #152]	; (8007780 <USBD_SetConfig+0x118>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d112      	bne.n	8007712 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076f4:	4b22      	ldr	r3, [pc, #136]	; (8007780 <USBD_SetConfig+0x118>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076fe:	4b20      	ldr	r3, [pc, #128]	; (8007780 <USBD_SetConfig+0x118>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff f9f0 	bl	8006aea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9bc 	bl	8007a88 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007710:	e033      	b.n	800777a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007712:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <USBD_SetConfig+0x118>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d01d      	beq.n	800775c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff f9de 	bl	8006aea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800772e:	4b14      	ldr	r3, [pc, #80]	; (8007780 <USBD_SetConfig+0x118>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007738:	4b11      	ldr	r3, [pc, #68]	; (8007780 <USBD_SetConfig+0x118>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff f9b4 	bl	8006aac <USBD_SetClassConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	2b02      	cmp	r3, #2
 8007748:	d104      	bne.n	8007754 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8f1 	bl	8007934 <USBD_CtlError>
            return;
 8007752:	e012      	b.n	800777a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f997 	bl	8007a88 <USBD_CtlSendStatus>
        break;
 800775a:	e00e      	b.n	800777a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f993 	bl	8007a88 <USBD_CtlSendStatus>
        break;
 8007762:	e00a      	b.n	800777a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8e4 	bl	8007934 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <USBD_SetConfig+0x118>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff f9b9 	bl	8006aea <USBD_ClrClassConfig>
        break;
 8007778:	bf00      	nop
    }
  }
}
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20000194 	.word	0x20000194

08007784 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88db      	ldrh	r3, [r3, #6]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d004      	beq.n	80077a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8cb 	bl	8007934 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800779e:	e021      	b.n	80077e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	db17      	blt.n	80077da <USBD_GetConfig+0x56>
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	dd02      	ble.n	80077b4 <USBD_GetConfig+0x30>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d00b      	beq.n	80077ca <USBD_GetConfig+0x46>
 80077b2:	e012      	b.n	80077da <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3308      	adds	r3, #8
 80077be:	2201      	movs	r2, #1
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f920 	bl	8007a08 <USBD_CtlSendData>
        break;
 80077c8:	e00c      	b.n	80077e4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3304      	adds	r3, #4
 80077ce:	2201      	movs	r2, #1
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f918 	bl	8007a08 <USBD_CtlSendData>
        break;
 80077d8:	e004      	b.n	80077e4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8a9 	bl	8007934 <USBD_CtlError>
        break;
 80077e2:	bf00      	nop
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fc:	3b01      	subs	r3, #1
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d81e      	bhi.n	8007840 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	88db      	ldrh	r3, [r3, #6]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d004      	beq.n	8007814 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f891 	bl	8007934 <USBD_CtlError>
        break;
 8007812:	e01a      	b.n	800784a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f043 0202 	orr.w	r2, r3, #2
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	330c      	adds	r3, #12
 8007834:	2202      	movs	r2, #2
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f8e5 	bl	8007a08 <USBD_CtlSendData>
      break;
 800783e:	e004      	b.n	800784a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f876 	bl	8007934 <USBD_CtlError>
      break;
 8007848:	bf00      	nop
  }
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	885b      	ldrh	r3, [r3, #2]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d106      	bne.n	8007872 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f90b 	bl	8007a88 <USBD_CtlSendStatus>
  }
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788a:	3b01      	subs	r3, #1
 800788c:	2b02      	cmp	r3, #2
 800788e:	d80b      	bhi.n	80078a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	885b      	ldrh	r3, [r3, #2]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10c      	bne.n	80078b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8f1 	bl	8007a88 <USBD_CtlSendStatus>
      }
      break;
 80078a6:	e004      	b.n	80078b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f842 	bl	8007934 <USBD_CtlError>
      break;
 80078b0:	e000      	b.n	80078b4 <USBD_ClrFeature+0x3a>
      break;
 80078b2:	bf00      	nop
  }
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	785a      	ldrb	r2, [r3, #1]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3302      	adds	r3, #2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	3303      	adds	r3, #3
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	3304      	adds	r3, #4
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3305      	adds	r3, #5
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	021b      	lsls	r3, r3, #8
 8007904:	b29b      	uxth	r3, r3
 8007906:	4413      	add	r3, r2
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3306      	adds	r3, #6
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3307      	adds	r3, #7
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	4413      	add	r3, r2
 8007924:	b29a      	uxth	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	80da      	strh	r2, [r3, #6]

}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fb65 	bl	8008010 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fb61 	bl	8008010 <USBD_LL_StallEP>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d032      	beq.n	80079d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f834 	bl	80079da <USBD_GetLen>
 8007972:	4603      	mov	r3, r0
 8007974:	3301      	adds	r3, #1
 8007976:	b29b      	uxth	r3, r3
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	75fa      	strb	r2, [r7, #23]
 8007986:	461a      	mov	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4413      	add	r3, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	75fa      	strb	r2, [r7, #23]
 8007998:	461a      	mov	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	2203      	movs	r2, #3
 80079a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079a2:	e012      	b.n	80079ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	60fa      	str	r2, [r7, #12]
 80079aa:	7dfa      	ldrb	r2, [r7, #23]
 80079ac:	1c51      	adds	r1, r2, #1
 80079ae:	75f9      	strb	r1, [r7, #23]
 80079b0:	4611      	mov	r1, r2
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	440a      	add	r2, r1
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	75fa      	strb	r2, [r7, #23]
 80079c0:	461a      	mov	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4413      	add	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e8      	bne.n	80079a4 <USBD_GetString+0x4e>
    }
  }
}
 80079d2:	bf00      	nop
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079e6:	e005      	b.n	80079f4 <USBD_GetLen+0x1a>
  {
    len++;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	3301      	adds	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3301      	adds	r3, #1
 80079f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f5      	bne.n	80079e8 <USBD_GetLen+0xe>
  }

  return len;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fb76 	bl	8008122 <USBD_LL_Transmit>

  return USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	2100      	movs	r1, #0
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb64 	bl	8008122 <USBD_LL_Transmit>

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	2100      	movs	r1, #0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fb75 	bl	8008168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fb3f 	bl	8008122 <USBD_LL_Transmit>

  return USBD_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2205      	movs	r2, #5
 8007aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb4f 	bl	8008168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	490e      	ldr	r1, [pc, #56]	; (8007b14 <MX_USB_DEVICE_Init+0x40>)
 8007adc:	480e      	ldr	r0, [pc, #56]	; (8007b18 <MX_USB_DEVICE_Init+0x44>)
 8007ade:	f7fe ff8b 	bl	80069f8 <USBD_Init>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ae8:	f7f8 fe00 	bl	80006ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007aec:	490b      	ldr	r1, [pc, #44]	; (8007b1c <MX_USB_DEVICE_Init+0x48>)
 8007aee:	480a      	ldr	r0, [pc, #40]	; (8007b18 <MX_USB_DEVICE_Init+0x44>)
 8007af0:	f7fe ffad 	bl	8006a4e <USBD_RegisterClass>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007afa:	f7f8 fdf7 	bl	80006ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007afe:	4806      	ldr	r0, [pc, #24]	; (8007b18 <MX_USB_DEVICE_Init+0x44>)
 8007b00:	f7fe ffbe 	bl	8006a80 <USBD_Start>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007b0a:	f7f8 fdef 	bl	80006ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b0e:	bf00      	nop
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	2000011c 	.word	0x2000011c
 8007b18:	20000214 	.word	0x20000214
 8007b1c:	20000014 	.word	0x20000014

08007b20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2212      	movs	r2, #18
 8007b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b32:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000138 	.word	0x20000138

08007b44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2204      	movs	r2, #4
 8007b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b56:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000014c 	.word	0x2000014c

08007b68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4907      	ldr	r1, [pc, #28]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b7e:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b80:	f7ff fee9 	bl	8007956 <USBD_GetString>
 8007b84:	e004      	b.n	8007b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4904      	ldr	r1, [pc, #16]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b8a:	4805      	ldr	r0, [pc, #20]	; (8007ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b8c:	f7ff fee3 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b90:	4b02      	ldr	r3, [pc, #8]	; (8007b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200004d8 	.word	0x200004d8
 8007ba0:	080082cc 	.word	0x080082cc

08007ba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bb4:	4804      	ldr	r0, [pc, #16]	; (8007bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bb6:	f7ff fece 	bl	8007956 <USBD_GetString>
  return USBD_StrDesc;
 8007bba:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	200004d8 	.word	0x200004d8
 8007bc8:	080082dc 	.word	0x080082dc

08007bcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	221a      	movs	r2, #26
 8007bdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bde:	f000 f843 	bl	8007c68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007be2:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000150 	.word	0x20000150

08007bf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c08:	f7ff fea5 	bl	8007956 <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c14:	f7ff fe9f 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200004d8 	.word	0x200004d8
 8007c28:	080082f0 	.word	0x080082f0

08007c2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4907      	ldr	r1, [pc, #28]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c42:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c44:	f7ff fe87 	bl	8007956 <USBD_GetString>
 8007c48:	e004      	b.n	8007c54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c4e:	4805      	ldr	r0, [pc, #20]	; (8007c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c50:	f7ff fe81 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200004d8 	.word	0x200004d8
 8007c64:	080082fc 	.word	0x080082fc

08007c68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <Get_SerialNum+0x44>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <Get_SerialNum+0x48>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <Get_SerialNum+0x4c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4413      	add	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c8e:	2208      	movs	r2, #8
 8007c90:	4909      	ldr	r1, [pc, #36]	; (8007cb8 <Get_SerialNum+0x50>)
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f814 	bl	8007cc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c98:	2204      	movs	r2, #4
 8007c9a:	4908      	ldr	r1, [pc, #32]	; (8007cbc <Get_SerialNum+0x54>)
 8007c9c:	68b8      	ldr	r0, [r7, #8]
 8007c9e:	f000 f80f 	bl	8007cc0 <IntToUnicode>
  }
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	1ffff7e8 	.word	0x1ffff7e8
 8007cb0:	1ffff7ec 	.word	0x1ffff7ec
 8007cb4:	1ffff7f0 	.word	0x1ffff7f0
 8007cb8:	20000152 	.word	0x20000152
 8007cbc:	20000162 	.word	0x20000162

08007cc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]
 8007cd6:	e027      	b.n	8007d28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0f1b      	lsrs	r3, r3, #28
 8007cdc:	2b09      	cmp	r3, #9
 8007cde:	d80b      	bhi.n	8007cf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	0f1b      	lsrs	r3, r3, #28
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	440b      	add	r3, r1
 8007cf0:	3230      	adds	r2, #48	; 0x30
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e00a      	b.n	8007d0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	0f1b      	lsrs	r3, r3, #28
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	4619      	mov	r1, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	440b      	add	r3, r1
 8007d08:	3237      	adds	r2, #55	; 0x37
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	3301      	adds	r3, #1
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	3301      	adds	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
 8007d28:	7dfa      	ldrb	r2, [r7, #23]
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d3d3      	bcc.n	8007cd8 <IntToUnicode+0x18>
  }
}
 8007d30:	bf00      	nop
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a0d      	ldr	r2, [pc, #52]	; (8007d80 <HAL_PCD_MspInit+0x44>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d113      	bne.n	8007d76 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <HAL_PCD_MspInit+0x48>)
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <HAL_PCD_MspInit+0x48>)
 8007d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d58:	61d3      	str	r3, [r2, #28]
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <HAL_PCD_MspInit+0x48>)
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	2014      	movs	r0, #20
 8007d6c:	f7f8 fef7 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d70:	2014      	movs	r0, #20
 8007d72:	f7f8 ff10 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40005c00 	.word	0x40005c00
 8007d84:	40021000 	.word	0x40021000

08007d88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fe feb6 	bl	8006b10 <USBD_LL_SetupStage>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	440b      	add	r3, r1
 8007dcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f7fe fee6 	bl	8006ba6 <USBD_LL_DataOutStage>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	440b      	add	r3, r1
 8007e02:	333c      	adds	r3, #60	; 0x3c
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7fe ff3d 	bl	8006c88 <USBD_LL_DataInStage>
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff f84d 	bl	8006ec4 <USBD_LL_SOF>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d001      	beq.n	8007e4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e46:	f7f8 fc51 	bl	80006ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e50:	7bfa      	ldrb	r2, [r7, #15]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fffd 	bl	8006e54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe ffb6 	bl	8006dd2 <USBD_LL_Reset>
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fff7 	bl	8006e72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <HAL_PCD_SuspendCallback+0x30>)
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	4a03      	ldr	r2, [pc, #12]	; (8007ea0 <HAL_PCD_SuspendCallback+0x30>)
 8007e92:	f043 0306 	orr.w	r3, r3, #6
 8007e96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	e000ed00 	.word	0xe000ed00

08007ea4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fff1 	bl	8006e9a <USBD_LL_Resume>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <USBD_LL_Init+0x88>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <USBD_LL_Init+0x88>)
 8007ed4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007ed8:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <USBD_LL_Init+0x88>)
 8007eda:	4a1c      	ldr	r2, [pc, #112]	; (8007f4c <USBD_LL_Init+0x8c>)
 8007edc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <USBD_LL_Init+0x88>)
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ee4:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <USBD_LL_Init+0x88>)
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007eea:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <USBD_LL_Init+0x88>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ef0:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <USBD_LL_Init+0x88>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <USBD_LL_Init+0x88>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007efc:	4812      	ldr	r0, [pc, #72]	; (8007f48 <USBD_LL_Init+0x88>)
 8007efe:	f7f9 ffcd 	bl	8001e9c <HAL_PCD_Init>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f08:	f7f8 fbf0 	bl	80006ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f12:	2318      	movs	r3, #24
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	f7fb fc29 	bl	800376e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f22:	2358      	movs	r3, #88	; 0x58
 8007f24:	2200      	movs	r2, #0
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	f7fb fc21 	bl	800376e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f36:	2200      	movs	r2, #0
 8007f38:	2181      	movs	r1, #129	; 0x81
 8007f3a:	f7fb fc18 	bl	800376e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200006d8 	.word	0x200006d8
 8007f4c:	40005c00 	.word	0x40005c00

08007f50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fa f8a3 	bl	80020b2 <HAL_PCD_Start>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f93c 	bl	80081f0 <USBD_Get_USB_Status>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	461a      	mov	r2, r3
 8007f94:	4603      	mov	r3, r0
 8007f96:	70fb      	strb	r3, [r7, #3]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70bb      	strb	r3, [r7, #2]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fae:	78bb      	ldrb	r3, [r7, #2]
 8007fb0:	883a      	ldrh	r2, [r7, #0]
 8007fb2:	78f9      	ldrb	r1, [r7, #3]
 8007fb4:	f7fa fa1d 	bl	80023f2 <HAL_PCD_EP_Open>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f916 	bl	80081f0 <USBD_Get_USB_Status>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fa fa64 	bl	80024be <HAL_PCD_EP_Close>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f8f7 	bl	80081f0 <USBD_Get_USB_Status>
 8008002:	4603      	mov	r3, r0
 8008004:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008006:	7bbb      	ldrb	r3, [r7, #14]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800802a:	78fa      	ldrb	r2, [r7, #3]
 800802c:	4611      	mov	r1, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7fa fb0d 	bl	800264e <HAL_PCD_EP_SetStall>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f8d8 	bl	80081f0 <USBD_Get_USB_Status>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008044:	7bbb      	ldrb	r3, [r7, #14]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008068:	78fa      	ldrb	r2, [r7, #3]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7fa fb4e 	bl	800270e <HAL_PCD_EP_ClrStall>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f8b9 	bl	80081f0 <USBD_Get_USB_Status>
 800807e:	4603      	mov	r3, r0
 8008080:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008082:	7bbb      	ldrb	r3, [r7, #14]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80080a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da0c      	bge.n	80080c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	440b      	add	r3, r1
 80080bc:	3302      	adds	r3, #2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	e00b      	b.n	80080da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c8:	68f9      	ldr	r1, [r7, #12]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	440b      	add	r3, r1
 80080d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80080d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fa f950 	bl	80023a8 <HAL_PCD_SetAddress>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f86e 	bl	80081f0 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	461a      	mov	r2, r3
 800812e:	460b      	mov	r3, r1
 8008130:	72fb      	strb	r3, [r7, #11]
 8008132:	4613      	mov	r3, r2
 8008134:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008144:	893b      	ldrh	r3, [r7, #8]
 8008146:	7af9      	ldrb	r1, [r7, #11]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	f7fa fa3d 	bl	80025c8 <HAL_PCD_EP_Transmit>
 800814e:	4603      	mov	r3, r0
 8008150:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f84b 	bl	80081f0 <USBD_Get_USB_Status>
 800815a:	4603      	mov	r3, r0
 800815c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800815e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	461a      	mov	r2, r3
 8008174:	460b      	mov	r3, r1
 8008176:	72fb      	strb	r3, [r7, #11]
 8008178:	4613      	mov	r3, r2
 800817a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800818a:	893b      	ldrh	r3, [r7, #8]
 800818c:	7af9      	ldrb	r1, [r7, #11]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	f7fa f9dd 	bl	800254e <HAL_PCD_EP_Receive>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f828 	bl	80081f0 <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80081a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_static_malloc+0x14>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr
 80081c4:	20000198 	.word	0x20000198

080081c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d817      	bhi.n	8008234 <USBD_Get_USB_Status+0x44>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_Get_USB_Status+0x1c>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008223 	.word	0x08008223
 8008214:	08008229 	.word	0x08008229
 8008218:	0800822f 	.word	0x0800822f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e00b      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008222:	2302      	movs	r3, #2
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e008      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	e005      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822e:	2302      	movs	r3, #2
 8008230:	73fb      	strb	r3, [r7, #15]
    break;
 8008232:	e002      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	bf00      	nop
  }
  return usb_status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <__libc_init_array>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	2500      	movs	r5, #0
 800824c:	4e0c      	ldr	r6, [pc, #48]	; (8008280 <__libc_init_array+0x38>)
 800824e:	4c0d      	ldr	r4, [pc, #52]	; (8008284 <__libc_init_array+0x3c>)
 8008250:	1ba4      	subs	r4, r4, r6
 8008252:	10a4      	asrs	r4, r4, #2
 8008254:	42a5      	cmp	r5, r4
 8008256:	d109      	bne.n	800826c <__libc_init_array+0x24>
 8008258:	f000 f822 	bl	80082a0 <_init>
 800825c:	2500      	movs	r5, #0
 800825e:	4e0a      	ldr	r6, [pc, #40]	; (8008288 <__libc_init_array+0x40>)
 8008260:	4c0a      	ldr	r4, [pc, #40]	; (800828c <__libc_init_array+0x44>)
 8008262:	1ba4      	subs	r4, r4, r6
 8008264:	10a4      	asrs	r4, r4, #2
 8008266:	42a5      	cmp	r5, r4
 8008268:	d105      	bne.n	8008276 <__libc_init_array+0x2e>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008270:	4798      	blx	r3
 8008272:	3501      	adds	r5, #1
 8008274:	e7ee      	b.n	8008254 <__libc_init_array+0xc>
 8008276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800827a:	4798      	blx	r3
 800827c:	3501      	adds	r5, #1
 800827e:	e7f2      	b.n	8008266 <__libc_init_array+0x1e>
 8008280:	08008324 	.word	0x08008324
 8008284:	08008324 	.word	0x08008324
 8008288:	08008324 	.word	0x08008324
 800828c:	08008328 	.word	0x08008328

08008290 <memset>:
 8008290:	4603      	mov	r3, r0
 8008292:	4402      	add	r2, r0
 8008294:	4293      	cmp	r3, r2
 8008296:	d100      	bne.n	800829a <memset+0xa>
 8008298:	4770      	bx	lr
 800829a:	f803 1b01 	strb.w	r1, [r3], #1
 800829e:	e7f9      	b.n	8008294 <memset+0x4>

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
